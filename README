Required software tools:
=======================

*) SCONS (http://www.scons.org/)
*) GMP (http://gmplib.org): usually installed in most Linux distributions
*) The GCC compiler works ; some others might, but it is untested.
*) GNU make for building

[Configure]
=====================)

if your site needs tweaks:

cp Makefile.local.example Makefile.local
Edit according to your local settings and your taste. You may have things
such as:

GMP:=$$HOME/gmp-4.2.2-install-tree/
SCONS_BINARY:=$$HOME/scons-0.98-install-tree/bin/scons
CFLAGS:=-O2 -funroll-loops
CC:=/usr/local/bin/gcc-4.2.4/bin/gcc

In each sub-directory (*), the top-level Makefile.local is read if it
exists. Then the Makefile.local present in the directory is read if it
exists (thereby overriding settings from the top-level file).


Compile:
=======

make clean ; make

(really do make clean if you happen to touch .h files, as there are no
auto-dependencies)

Run an example:
===============

tmp=/tmp
name=c59

# or for csh addicts:
setenv tmp /tmp; setenv name c59

cat <<EOF > $tmp/$name
n:71641520761751435455133616475667090434063332228247871795429
EOF

## POLYNOMIAL SELECTION STEP
polyselect/polyselect -full -e 1e6 < $tmp/$name > $tmp/$name.poly

# creating factor base
sieve/makefb -poly $tmp/$name.poly > $tmp/$name.roots

# if you want to use free relations
./linalg/freerel -poly $tmp/$name.poly -fb $tmp/$name.roots > $tmp/$name.rels

## SIEVING_STEP
## the sieving parameters must be given by hand, sorry!
## and they depend on the polynomial found by polyselect (i.e., b-bound 2500
## below might be too small with different polynomials)
## WARNING: see polyselect/README to know how to optimize the sieving region
## and check the sieving parameters are optimal
sieve/sieve -poly $tmp/$name.poly -fb $tmp/$name.roots -1000000 1000000 1 2500\
 > $tmp/$name.rels_raw

[lattice siever: it is still in heavy development, but you can use it at your
own risk, see sieve/README.las]

# note for CACAO members: some data files with sieve relations are available in
# /net/tiramisu/cado1/cado/Examples/{c20,c59,c80} (see below how to use them)

# checking norms, splitting large cofactors and appending to rels
postsieve/checknorms/checknorms -poly $tmp/$name.poly $tmp/$name.rels_raw \
   >> $tmp/$name.rels

/bin/rm -f $tmp/$name.nodup $tmp/$name.purged $tmp/$name.*algside*
./merge_linalg_sqrt.sh $tmp/$name 1.0 50 500 200
## (see README.params for parameter values)

## CLEANING STEP: destroys everything, which might not be what you want...
/bin/rm -fr $tmp/$name.*

##############################################################################
Using merge_linalg_sqrt2.sh
----------------------------

Since we are having zillions of parameters (and more to come), 
this script takes as input a configuration file for the filtering phase.
At the same time, it is designed to handle zillions of relation files if
needed.

	./merge_linalg_sqrt2.sh name.params rel1 rel2 ... relk

will read files relation files rel1 to relk to form the name.nodup first big
(as yet) intermediate file. When just 'name.params' is given, the script looks
for files beginning rels.* and uses them.

A param file consists of lines, as in:

cado=where_cado_is
root=Examples/c59b/c59b
prune=1.0
maxlevel=5
cwmax=10
rwmax=40
mt=4
bwstrat=1

mt means multithreading to 4, bwstrat to 1 means use merge and stop when
cN is "minimal".

Parameters that are not found in the file received default
values. For instance, you can override the choice of the 'name' parameter
which defauts to $root.$prune"x"$maxlevel"x"$cwmax"x"$rwmax and can be
boring for some users. Just put:

name=toto_likes_his_tata

as directory files for intermediate computations if you like.

The param file can contain more parameters that can be deduced from the
parsing phase of the script. For instance, desperate purge computations
might use 'maxpr' and 'maxpa', or you can use a different bw-merge strategy.

Another trick: since we spend so much time using wc, the variable

nrels_dup=37832829

can be put in the param file. If set, when one knows that the dup file is
stable, we do not need to recompute the number of relations in it. It is very
useful when trying a lot of parameters in the purge phase.

##############################################################################

(for CACAO members) How to use the files in /net/tiramisu/cado1/cado/Examples:
------------------------------------------------------------------------------

Example with /net/tiramisu/cado1/cado/c80 (for sh addicts):

tmp=/localdisk/tmp; name=c80; d=/net/tiramisu/cado1/cado/Examples
# or for csh addicts:
set tmp=/localdisk/tmp; set name=c80; set d=/net/tiramisu/cado1/cado/Examples

/bin/rm -fr $tmp/$name.*
cp $d/$name/$name.poly $tmp
# generate free relations (optional)
sieve/makefb -poly $tmp/$name.poly > $tmp/$name.roots
./linalg/freerel -poly $tmp/$name.poly -fb $tmp/$name.roots > $tmp/$name.rels
# normally the norms are already completely factored, but just in case...
postsieve/checknorms/checknorms -poly $tmp/$name.poly $d/$name/$name.rels \
   >> $tmp/$name.rels
./merge_linalg_sqrt.sh $tmp/$name <parameters> [see README.params]
/bin/rm -fr $tmp/$name.*
