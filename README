Required software tools:
=======================

*) GMP (http://gmplib.org): usually installed in most Linux distributions
*) The GCC compiler works ; some others might, but it is untested.
*) GNU make for building

[Configure]
=====================)

if your site needs tweaks:

cp Makefile.local.example Makefile.local
Edit according to your local settings and your taste. You may have things
such as:

GMP=$HOME/gmp-4.2.4-install-tree/
CFLAGS=-msse2 -O2
CC=/usr/local/gcc-4.3.2/bin/gcc

In each sub-directory (*), the top-level Makefile.local is read if it
exists. Then the Makefile.local present in the directory is read if it
exists (thereby overriding settings from the top-level file).


Compile:
=======

make clean ; make

(really do make clean if you happen to touch .h files, as there are no
auto-dependencies)

Run an example:
===============

./new_run.c59

The skript tries to factor a 59 digit number.

For other numbers, create a parameter file analogous to params.c59
and call new_cadofactor.pl with this file name and further parameters
as can be seen in new_run.c59.


##############################################################################
Using merge_linalg_sqrt2.sh
----------------------------

Since we are having zillions of parameters (and more to come),
this script takes as input a configuration file for the filtering phase.
At the same time, it is designed to handle zillions of relation files if
needed.

	./merge_linalg_sqrt2.sh name.params rel1 rel2 ... relk

will read files relation files rel1 to relk to form the name.nodup first big
(as yet) intermediate file. When just 'name.params' is given, the script looks
for files beginning rels.* and uses them.

A param file consists of lines, as in:

cado=where_cado_is
root=Examples/c59b/c59b
maxlevel=5
cwmax=10
rwmax=40
mt=4
bwstrat=1

mt means multithreading to 4, bwstrat to 1 means use merge and stop when
cN is "minimal".

Parameters that are not found in the file received default
values. For instance, you can override the choice of the 'name' parameter
which defauts to $root.$maxlevel"x"$cwmax"x"$rwmax and can be
boring for some users. Just put:

name=toto_likes_his_tata

as directory files for intermediate computations if you like.

The param file can contain more parameters that can be deduced from the
parsing phase of the script. For instance, desperate purge computations
might use 'maxpr' and 'maxpa', or you can use a different bw-merge strategy.

Another trick: since we spend so much time using wc, the variable

nrels_dup=37832829

can be put in the param file. If set, when one knows that the dup file is
stable, we do not need to recompute the number of relations in it. It is very
useful when trying a lot of parameters in the purge phase.

##############################################################################

(for CACAO members) How to use the files in /net/tiramisu/cado1/cado/Examples:
------------------------------------------------------------------------------

Example with /net/tiramisu/cado1/cado/c80 (for sh addicts):

tmp=/localdisk/tmp; name=c80; d=/net/tiramisu/cado1/cado/Examples
# or for csh addicts:
set tmp=/localdisk/tmp; set name=c80; set d=/net/tiramisu/cado1/cado/Examples

/bin/rm -fr $tmp/$name.*
cp $d/$name/$name.poly $tmp
# generate free relations (optional)
sieve/makefb -poly $tmp/$name.poly > $tmp/$name.roots
./linalg/freerel -poly $tmp/$name.poly -fb $tmp/$name.roots > $tmp/$name.rels
# normally the norms are already completely factored, but just in case...
postsieve/checknorms/checknorms -poly $tmp/$name.poly $d/$name/$name.rels \
   >> $tmp/$name.rels
./merge_linalg_sqrt.sh $tmp/$name <parameters> [see README.params]
/bin/rm -fr $tmp/$name.*

##############################################################################
Using openMPI
-------------
1. compile openmpi and install it. Make sure you updated your PATH and
LD_PATH. Add MPI_DIR to your Makefile.local

2. go to linalg and compile:

cd linalg; make mpimerge

3. edit the merge.sh script to be able to use the mpi version.

4. It should work. Here is an example of file 'mpi.hosts':

emmental
parmesan 	slots=2
tomme 		slots=2
abondance 	slots=2
ambiorix 	slots=2
appenzeller	slots=2
gruyere		slots=2
comte		slots=2
beaufort	slots=2

meaning that two processes can be launched on some machines (default slot
value is 1). See the README in the openmpi distrib for more.

WARNING: the numerical results of mpimerge cannot be the same as the
single proc execution of merge.

