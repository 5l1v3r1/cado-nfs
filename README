Required software tools:
========================

*) GMP (http://gmplib.org): usually installed in most Linux distributions
*) The GCC compiler works ; some others might, but it is untested. C and
   C++ are required.
*) GNU make and CMake for building (CMake is installed on the fly if missing)
*) Support for posix threads.
*) The general script uses a lot of unix tools: perl, ssh, gzip to
   mention but a few. 

Optionally:
*) Support for curl library.
*) Support for MPI.


[Configure]
===========

if your site needs tweaks, set such tweaks using environment variables,
or via the shell script local.sh ; you may start with

cp local.sh.example local.sh

Edit according to your local settings and your taste. local.sh.example
gives documentation on the recognized environment variables and their
effect.

Note that tweaks in local.sh are global ; although earlier CADO versions
offered the possibility of setting tweaks at a sub-directory level, this
is no longer so easily doable (one could try to restore this
functionality, though).


Compile:
========

make

It may or may not be relevant to do ``make install'' as well ; at the
moment consider ``make install'' to be badly tested.

Run a factorization on current machine:
=======================================

./factor.sh 353493749731236273014678071260920590602836471854359705356610427214806564110716801866803409 -t 2

The integer must be at least 90 digits and not contain small prime
factor. The option '-t 2' notice the number of cores on current machine,
sieve and linear algebra use 2 threads.

./factor.sh 353493749731236273014678071260920590602836471854359705356610427214806564110716801866803409 -t 4 -ssh

If the number of cores is strictly greater than 2, it is more efficient
to use ssh to distribute the polynomial selection and sieve on localhost.
For configure ssh, see the next section.

For a larger factorization (distribute on several machines),
please use directly the main script cadofactor.pl

To factor a number with two non linear polynomials, see README.nonlinear.

Check that your SSH configuration is correct:
=============================================

The master script uses SSH to connect to available computing resources
(including localhost). In order to avoid the script asking your password
or passphrase, you must have a public-key authentication and an agent.

Also, since localhost has an IP and key that varies, you'd better have
those 3 lines in your $HOME/.ssh/config:

Host    localhost
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null

You should also put in $HOME/.ssh/authorized_keys your public key.

If everything is correctly configured, when you type 

ssh localhost

you should end up with a new shell on your machine, without having to
type any password/passphrase.

Using CADO-NFS under Windows:
=============================

Portability of CADO-NFS on Windows was not an initial goal of that project,
however we give here some hints that might help people wanting to use CADO-NFS
under Windows:

* if you only need the siever to run on Windows, then you only need to compile
  the "las" program on Windows

* CygWin provides a Unix-like environment, where compilation should be easy.
  However the binary requires a cygwin.dll file.

* if you want a binary without any dependency, you might try MinGW. The INSTALL
  file from GNU MPFR contains detailed instructions on how to compile MPFR
  under Windows. Those instructions should work for CADO-NFS too.

* you might try to use MPIR (mpir.org) instead of GMP. MPIR is a fork of GMP,
  which claims to be more portable under Windows.
