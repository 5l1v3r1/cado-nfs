- Norm initialization speed-up.
  There is still time to save in norm init. For instance, the
  bit-fiddling to check if we have to recompute the norm is probably too
  costly. Also, the fix-prec computation has not yet been carefully
  optimized.

- Make the projective roots work by increasing value of j.
  This is necessary to make them compatible with the bucket-region
  sieving. It is also a good thing for locality.
  This implies to transform the F_p-basis { p, t*p, t^2*p, ... }
  into a basis where the coefficients of degree more than deg(p) form a
  diagonal matrix (and not only a triangular one).

- Provide more fixed sizes in fppol*_ arithmetic.
  This is important for cofactorization. 
  It should take advantage of SSE/AVX, so that a bit of rewriting of
  lowlevel structures in necessary.
  When we are at it, having 8-bit and 4-bit arithmetic would be nice
  (especially for norm computations in characteristic 3).

- Cleaning type declaration/definition.
  It is convenient to *declare* types in a unique .h file.
  However, it is interesting to keep the struct definitions in the .h
  file that also declares all the associated functions.
  -> one file fppol_types.h that contains the CPP-craziness for fppol
  types.
  -> one file types.h that contains all other type declarations (ijvec_t,
  fbideal_t, ...)
  -> the __toto_struct definition should go to the .h file that provide
  also function to work on toto_t.

- Fix sublat.
  Sublat are broken.
  Also, they are way too slow. It is necessary to have a few specific
  function for arithmetic involving the t^2+t polynomial.

- Add the fppol*_set_random() functions.
  set_random() is not so simple if we want uniformity in characteristic 3.
  Since it is used only for EDF, we don't really need it and can live
  with strongly biased randomness.
  At some point we might want to use random for automatic tests of the
  polynomial arithmetic.

- Uniformization of the upper bounds
  It would make sense to ensure that all the upper bounds on degree
  involved in the code are *strict* upper bounds. This is currently not
  the case for fbb/lpb for instance.

- Split factor bases.
  Small factor base primes and large factor base primes are not handled
  in the same way, so they do not need the same kind of precomputation. 
  It will be easier to have two separate data structures. 

- Add basic smoothness tests based on degree.
  If after sieving irreducibles up to degree (say) 22, we get a
  result of degree less than 46, then it is necessarily prime.
  It is not clear that we can use it reliably right now, because we do
  not do resieving. 

- Factorize / clean-up the fq_t part.
  Right now, fq_t relies on sq_t. It made sense for enumerating the
  special-qs. But now, it is also used in makefb...
