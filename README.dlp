Using CADO-NFS for DLP in large characteristic fields.
------------------------------------------------------

**** Basic usage: DLP in GF(p)

The cadofactor.py script and the factor.sh wrapper can be used to compute
discrete logarithms in a prime field GF(p).

For the moment, it is required to have Magma installed (it seems to fail
with version of Magma before 2.19). It is only capable to handle tiny
examples, since the linear algebra is currently done within Magma. This
should change soon (hopefully). Using the linalg/bwc/bwc-ptrace.sh
script, it might be possible to run the linear algebra step by hand for
larger examples.

In principle, just typing
  ./factor.sh p -dlp
should start a computation of discrete logarithms in GF(p), where p is a
prime of (around) 59 digits. For other sizes, the default parameters may
not be yet available.

A direct use of cadofactor.py allows more flexibility. An example of
parameter file is given in params_dl/param.p59. The main difference is
the presence of the "dlp=true" line, and the lines related to characters
and sqrt disappear.

By default, the script will factor p-1 and compute discrete logs modulo
the largest prime factor ell of p-1. This can be overridden by giving
explicitly ell=... in the parameter file.

The process is automatic up to the reconstruction of logarithms from the
output of the linear algebra and the data remembered during the filtering
phase. The result is in the $wordir/$name.reconstruclog.dlog file.

Individual logarithms, using a descent stage, must be computed by hand
with the help of the sieve/las binary. See sieve/README.descent for some
guidelines.

**** Using non-linear polynomials

Just like for factorization, it is possible to use two non-linear
polynomials for DLP. However, the polynomial selection is not automatic
in that case: the user must provide the polynomial file.

See README.nonlinear for an example of importing a polynomial file with 2
non-linear polynomials.

The main difference with factorization is that there is no need to add
the nratchars parameters for characters, since the characters binary is
not used in DLP.

Another important issue is that since the descent is not yet automated,
the script has no way to check the results if there is no linear
polynomial. A good idea is to set
  tasks.reconstructlog.partial = false
so that many consistency checks are performed while using all the
relations that were deleted during the filter.

**** Discrete logarithms in GF(p^k) for small k

The algorithm works mutatis mutandis for discrete logarithm computations
in GF(p^k). The only difference is that the two polynomials must have a
common irreducible factor of degree k over GF(p). Polynomial selection
for this case is not yet included, so you must build them by yourself,
based on constructions available in the literature.

