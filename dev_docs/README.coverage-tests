# This quick note details how it is possible to do coverage tests on the
# cado source tree.

# I'm adding this to my local.sh file:

if [ "$COV" ] ; then
build_tree="${build_tree}.cov"
DEBUG=1
CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
CXXFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
fi

# (of course, your mileage may vary, depending on how you like to setup
# your local.sh file).

# I'm compiling cado with COV=1 make -j 32

# Then I do:

./build/x86_64.cov/run_example.sh c59

# Now I use the lcov package, and its geninfo/genhtml scripts. geninfo
# dislikes some file that gcov seems to spontaneously create, so the
# following patch to /usr/bin/geninfo is useful:

# (patch begins here)
--- /usr/bin/geninfo	2009-05-01 02:02:06.000000000 +0200
+++ /tmp/geninfo	2010-10-03 22:52:10.216234888 +0200
@@ -720,6 +723,7 @@
 	@unprocessed = keys(%bb_content);
 	foreach $gcov_file (@gcov_list)
 	{
+            next if $gcov_file eq '<built-in>.gcov';
 		($source, $object) = read_gcov_header($gcov_file);
 
 		if (defined($source))
# (end of patch)

# Now I do:

andouille ~/NFS/cado $ /tmp/geninfo --no-checksum --ignore-errors gcov,source  -q --output-filename cado-nfs.info ./build/x86_64.cov/
andouille ~/NFS/cado $ genhtml -o ~/.webdir/cado/ cado-nfs.info 

# And go to http://www.loria.fr/~thome/cado (which happens to be where an
# apache server serves the location ~/.webdir/cado/ ; of course this is
# only my very own setup).

