ROOTSIEVE TODO
==============
By Antonio Vera.

STATUS OF THE CURRENT CODE
==========================
The current C rootsieve code provide WRONG results with respect to those
obtained with the naive computation of alpha.

The main differences the C code (fast_rootsieve.c) with respect to the original SAGE code (kleinjung.sage), is that we sieve
in a rectangle (previously it was a square), and that we no longer fill the j,k (or u,v) array
while rootsieving. Instead, we return a list of lattices and their respective contributions.
This make us able to only keep a line of the alpha array in main memory when computing the 
best value of alpha. This is necessary in practice, otherwise the array will hardly fit 
into main memory (32G is a typical size ofsuch an array).

We modified the original SAGE version into kleinjung-list-of-lattices.sage, in order to have a reference for the new C code.

The code running the tests is contained in alpha.c for the C version and in debug_rootsieve.sage for the SAGE one respectively. 

TESTS MADE
==========
The C version of rootsieve has been tested in an example against the original SAGE version (written in kleinjung.sage, then in the modified version kleinjung-list-of-lattices.sage),
(which is the one in debug_rootsieve.sage, or even in alpha.c). They have the same execution traces.

TODO
====
Main goal : obtain the same values of alpha as given by the naive method.

The work program I recommend is the following :
-- 
Start working with the C and SAGE files.
--
1. Automate testing and set a reasonable testbed (obtained from Kleinjung's algorithm).
2. Check that the C and SAGE versions return the same lattice lists. (Useful functions and trace-oriented printings are already there, or can be adjusted using the preprocessor constants.)
3. Check the post-treatment (ie, distribution of contributions in the rectangle) in both versions. It could be useful to try a tiny rectangle example.
--
Now switch to the alpha.c file and fix a prime, say p=2, using the preprocessor constants.
--
4. In the rootsieve_method function, check that the contributions of the lattices are well distributed, maybe using a very little rectangle, and computing
some examples by hand.
5. As rootsieve obtains the average p-valuation times log(p), one has to center this computation by substracting log(p)/(p-1),
in order to obtain an alpha term (you sum up all these terms, for every p). Check that the alpha.c code correctly performs this
task, obtaining the right values of alpha for the fixed prime.
--
I hope that, at this point, the error will be made clear.
