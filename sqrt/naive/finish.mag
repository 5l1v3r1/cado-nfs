// Uses the two files NFSRATFILE and NFSALGFILE defined in /tmp/formagma
// as well as NFS4MAGMA

function MyIsSqrt(x)
  K := Parent(x);
  f := DefiningPolynomial(K);
  p := NextPrime(Random(2^50));
  for i := 1 to 100 do
    repeat
      repeat 
	p := NextPrime(p);
	test1, fp := IsCoercible(PolynomialRing(GF(p)), f);
	test2, xp := IsCoercible(PolynomialRing(GF(p)), Eltseq(x));
      until test1 and test2;
      test3, rp := HasRoot(fp);
    until test3;
    xx := Evaluate(xp, rp);
    if not IsSquare(xx) then return false; end if;
  end for;
  return true;
end function;

function TrySqrt(x, p, prec)
  K := Parent(x);
  f := DefiningPolynomial(K);
  Qp := pAdicField(p,prec);
  Qq := UnramifiedExtension(Qp, f);
  xx := Qq!ChangeUniverse(Eltseq(x), Qp);
  test, x := IsSquare(xx);
  if not test then
    error "not a square\n";
  end if;
  x := [ Integers(p^prec)!Integers()!t : t in Eltseq(x) ];
  X := [];
  for t in x do
    test, y := RationalReconstruction(t);
    if not test then return false, K!0; end if;
    Append(~X, y);
  end for;

  return true, K!X;
end function;

function FindSuitableP(a);
  K := Parent(a);
  f := DefiningPolynomial(K);
  p := 2;
  repeat 
    repeat
      p := NextPrime(p);
      test1, fp := IsCoercible(PolynomialRing(GF(p)), f);
      test2, ap := IsCoercible(PolynomialRing(GF(p)), Eltseq(a));
    until test1 and test2;
  until IsIrreducible(fp);
  return p;
end function;


PP<x> := PolynomialRing(Rationals());

//load "/tmp/formagma";

/*
f := -3229755921225369*x^0-48676961965686*x^1-391249724*x^2+516873524*x^3;
m := 51751964056271939;
N := 71641520761751435455133616475667090434063332228247871795429;
*/

function FromF(F)
	ff:=[];
	for i:=1 to #F do
//	    printf "Converting F[%o] at %o\n", i, Cputime();
	    ff[i]:=StringToInteger(F[i], 16);
	end for;
	if ff[1] gt 0 then
	    lgff1:=Log(RealField(20) ! ff[1]);
	else
	    lgff1:=Log(RealField(20) ! (-ff[1]));
	end if;
//	printf "log(ff[1])=%o, %o (%o)\n", lgff1, #F[1], #F[1] * Log(16);
	// patch!!!!
	if lgff1 lt 0 then
	    printf "PATCHHHHHHHHHHHH!\n";
	    // length(#F[1]) approx Log(|ff[1]|)/Log(16)
	    lgff1:=#F[1] * Log(16);
	end if;
	return ff, lgff1;
end function;

function finish(f, m, N, ratfile, algfile, algprod)

if false then
  if (Degree(f) mod 2) eq 1 then
    printf "// Using JMC's algorithm\n";
    return finishWithJMC(N, f, m, ratfile, algfile);
  end if;
end if;

fd := LeadingCoefficient(f);
K := NumberField(f);
F := Split(Read(algprod));

v := StringToInteger(F[#F]);
Prune(~F);

printf "Here is v = %o and #F = %o\n", v, #F;

ff,lgff1:=FromF(F);
if IsOdd(v) then
  ff := [fd*ff[i] : i in [1..#ff]];
  v +:= 1;
end if;

printf "Checking that a looks like a square at %o\n", Cputime();
a := K!ff;
assert MyIsSqrt(a);

//printf "and now for ff[1]\n";
//printf "abs(ff[1])=%o\n", AbsoluteValue(ff[1]);

printf "Finding a suitable p at %o\n", Cputime();
p := FindSuitableP(a);
printf "p = %o => lgff1 = %o\n", p, lgff1;
//prec := Ceiling(1.2*Log(p, AbsoluteValue(ff[1])));
prec:=Ceiling(1.2 * lgff1/Log(p));
repeat 
  printf "Trying sqrt with lifting at precision: %o bits\n", Truncate(prec * Log(2, p));
  test, b := TrySqrt(a, p, prec);
  if test then
    test := b^2 eq a;
  end if;
  prec *:= 2;
until test;

gra := Integers(N)!Evaluate(PP!Eltseq(b), m) * (Integers(N)!(1/fd))^(v div 2);

F := StringToInteger(Read(ratfile));
grr := Integers(N)!F;

if (gra^2-grr^2) eq 0 then
    printf "R^2=A^2\n";
else
    printf "R^2 != A^2\n";
    printf "grr^2=%o\n", grr^2;
    printf "gra^2=%o\n", gra^2;
end if;

g1 := GCD(Integers()!(gra-grr), N);
g2 := GCD(Integers()!(gra+grr), N);

if not IsProbablePrime(g1) then printf "g1 is composite\n"; end if;
if not IsProbablePrime(g2) then printf "g2 is composite\n"; end if;

return [g1, g2];

end function;


