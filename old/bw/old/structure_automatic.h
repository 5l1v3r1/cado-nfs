/* Copyright (C) 1999--2006 Emmanuel Thome */

/* This file was generated by m4 on Wed Dec 12 09:21:14 CET 2007 */
/* Do not edit this file. Re-generate instead from the source (using m4) */

#ifndef INCLUDING_STRUCTURE_AUTOMATIC_H_
#error "Do not include this file directly\n"
#endif

#ifndef STRUCTURE_AUTOMATIC_H_
#define STRUCTURE_AUTOMATIC_H_

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************/
/* Here are the definitions for bw_mnmat : m_param x n_param matrices, line local */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef mp_limb_t		bw_mnmat_r[m_param][n_param][bw_allocsize];
#define mnmat_pos_m(x,i,j,k)	x[i][j][k]
#define mnmat_scal_m(x,i,j)	((mp_limb_t *) (x[i][j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_mnmat_r;
#define mnmat_pos_m(x,i,j,k)    *((x)+(k)+bw_allocsize*((j)+n_param*(i)))
#define mnmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+bw_allocsize*((j)+n_param*(i))))
#endif	/* HARDCODE_PARAMS */

#define mnmat_size		(m_param*n_param*bw_allocsize)
#ifdef HARDCODE_PARAMS
#define mnmat_alloc_m(x)	((void*)(x))
#define mnmat_free_m(x)
#define mnmat_head_m(x)		((void*) &(mnmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define mnmat_alloc_m(x)	((void *) (x = (bw_mnmat_r) mymalloc(mnmat_size*sizeof(mp_limb_t))))
#define mnmat_free_m(x)		free(x)
#define mnmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define mnmat_zero_m(x)		(void) memset(mnmat_head_m(x),0,mnmat_size*sizeof(mp_limb_t))
#define mnmat_copy_m(y,x)	(void) memcpy(y,x,mnmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_mnmat_r,bw_mnmat);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_mnmat_alloc)
#pragma inline(mnmat_free)
#pragma inline(mnmat_pos)
#pragma inline(mnmat_scal)
#pragma inline(mnmat_head)
#pragma inline(mnmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mnmat_alloc(x)		_mnmat_alloc(&(x))
FASTFUNC void*			_mnmat_alloc(bw_mnmat *);
FASTFUNC void			mnmat_free(bw_mnmat);
FASTFUNC mp_limb_t		mnmat_pos(bw_mnmat,  int, int, int);
FASTFUNC mp_limb_t *		mnmat_scal(bw_mnmat, int, int);
FASTFUNC void *			mnmat_head(bw_mnmat);
FASTFUNC void			mnmat_zero(bw_mnmat);

#else	/* PREFER_INLINES */

#define mnmat_alloc(x)		mnmat_alloc_m(STRICTTYPE_VAL(x))
#define mnmat_free(x)		mnmat_free_m(STRICTTYPE_VAL(x))
#define mnmat_pos(x,i,j,k)	mnmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define mnmat_scal(x,i,j)	mnmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define mnmat_head(x)		mnmat_head_m(STRICTTYPE_VAL(x))
#define mnmat_zero(x)		mnmat_zero_m(STRICTTYPE_VAL(x))
#define mnmat_copy(y,x)		mnmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_nbmat : n_param x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_nbmat_r[bigdim][n_param][bw_allocsize];
#define nbmat_pos_m(x,i,j,k)	x[j][i][k]
#define nbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define nbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_nbmat_r;
#define nbmat_pos_m(x,i,j,k)    *((x)+(k)+bw_allocsize*((i)+n_param*(j)))
#define nbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+bw_allocsize*((i)+n_param*(j))))
#define nbmat_col_m(x,j)	((mp_limb_t *) ((x)+bw_allocsize*n_param*(j)))
#endif	/* HARDCODE_PARAMS */

#define nbmat_size		(n_param*bigdim*bw_allocsize)
#ifdef HARDCODE_PARAMS
#define nbmat_alloc_m(x)	((void*)(x))
#define nbmat_free_m(x)
#define nbmat_head_m(x)		((void*) &(nbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define nbmat_alloc_m(x)	((void *) (x = (bw_nbmat_r) mymalloc(nbmat_size*sizeof(mp_limb_t))))
#define nbmat_free_m(x)		free(x)
#define nbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define nbmat_zero_m(x)		(void) memset(nbmat_head_m(x),0,nbmat_size*sizeof(mp_limb_t))
#define nbmat_copy_m(y,x)	(void) memcpy(y,x,nbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_nbmat_r,bw_nbmat);

#define ncol_size			(n_param*bw_allocsize)
#define	ncol_copy_m(y,x)	(void) memcpy(y,x,ncol_size*sizeof(mp_limb_t))
#define	ncol_zero_m(x)		(void) memset(x,0,ncol_size*sizeof(mp_limb_t))
#define	ncol_scal_m(c,i)	((mp_limb_t *) ((c)+i*bw_allocsize))
#define ncol_alloc_m(x)	(x=(bw_ncol_r) mymalloc(ncol_size*sizeof(mp_limb_t)))
#define ncol_free_m(x)		free(x)
typedef mp_limb_t * bw_ncol_r;
STRICTTYPE_DECL(bw_ncol_r,bw_ncol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_nbmat_alloc)
#pragma inline(nbmat_free)
#pragma inline(nbmat_pos)
#pragma inline(nbmat_scal)
#pragma inline(nbmat_head)
#pragma inline(nbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define nbmat_alloc(x)		_nbmat_alloc(&(x))
FASTFUNC void*			_nbmat_alloc(bw_nbmat *);
FASTFUNC void			nbmat_free(bw_nbmat);
FASTFUNC mp_limb_t		nbmat_pos(bw_nbmat,  int, int, int);
FASTFUNC mp_limb_t *		nbmat_scal(bw_nbmat, int, int);
FASTFUNC void *			nbmat_head(bw_nbmat);
FASTFUNC void			nbmat_zero(bw_nbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(nbmat_col)
#pragma inline(ncol_copy)
#pragma inline(ncol_zero)
#pragma inline(ncol_scal)
#pragma inline(_ncol_alloc)
#pragma inline(ncol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	ncol_alloc(x)		_ncol_alloc(&(x))
FASTFUNC bw_ncol nbmat_col(bw_nbmat, int);
FASTFUNC void ncol_copy(bw_ncol, bw_ncol);
FASTFUNC void ncol_zero(bw_ncol);
FASTFUNC mp_limb_t * ncol_scal(bw_ncol, int);
FASTFUNC void * _ncol_alloc(bw_ncol *);
FASTFUNC void ncol_free(bw_ncol);

#else	/* PREFER_INLINES */

#define nbmat_alloc(x)		nbmat_alloc_m(STRICTTYPE_VAL(x))
#define nbmat_free(x)		nbmat_free_m(STRICTTYPE_VAL(x))
#define nbmat_pos(x,i,j,k)	nbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define nbmat_scal(x,i,j)	nbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define nbmat_head(x)		nbmat_head_m(STRICTTYPE_VAL(x))
#define nbmat_zero(x)		nbmat_zero_m(STRICTTYPE_VAL(x))
#define nbmat_copy(y,x)		nbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define nbmat_col(x,j)		STRICTTYPE_CAST(bw_ncol,nbmat_col_m(STRICTTYPE_VAL(x),j))
#define ncol_copy(y,x)		ncol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define ncol_zero(x)		ncol_zero_m(STRICTTYPE_VAL(x))
#define ncol_scal(c,i)		ncol_scal_m(STRICTTYPE_VAL(c),i)
#define ncol_alloc(x)		ncol_alloc_m(STRICTTYPE_VAL(x))
#define ncol_free(x)		ncol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int ncol_is_zero(bw_ncol);


/*****************************************************************************/
/* Here are the definitions for bw_mbmat : m_param x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_mbmat_r[bigdim][m_param][bw_allocsize];
#define mbmat_pos_m(x,i,j,k)	x[j][i][k]
#define mbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define mbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_mbmat_r;
#define mbmat_pos_m(x,i,j,k)    *((x)+(k)+bw_allocsize*((i)+m_param*(j)))
#define mbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+bw_allocsize*((i)+m_param*(j))))
#define mbmat_col_m(x,j)	((mp_limb_t *) ((x)+bw_allocsize*m_param*(j)))
#endif	/* HARDCODE_PARAMS */

#define mbmat_size		(m_param*bigdim*bw_allocsize)
#ifdef HARDCODE_PARAMS
#define mbmat_alloc_m(x)	((void*)(x))
#define mbmat_free_m(x)
#define mbmat_head_m(x)		((void*) &(mbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define mbmat_alloc_m(x)	((void *) (x = (bw_mbmat_r) mymalloc(mbmat_size*sizeof(mp_limb_t))))
#define mbmat_free_m(x)		free(x)
#define mbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define mbmat_zero_m(x)		(void) memset(mbmat_head_m(x),0,mbmat_size*sizeof(mp_limb_t))
#define mbmat_copy_m(y,x)	(void) memcpy(y,x,mbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_mbmat_r,bw_mbmat);

#define mcol_size			(m_param*bw_allocsize)
#define	mcol_copy_m(y,x)	(void) memcpy(y,x,mcol_size*sizeof(mp_limb_t))
#define	mcol_zero_m(x)		(void) memset(x,0,mcol_size*sizeof(mp_limb_t))
#define	mcol_scal_m(c,i)	((mp_limb_t *) ((c)+i*bw_allocsize))
#define mcol_alloc_m(x)	(x=(bw_mcol_r) mymalloc(mcol_size*sizeof(mp_limb_t)))
#define mcol_free_m(x)		free(x)
typedef mp_limb_t * bw_mcol_r;
STRICTTYPE_DECL(bw_mcol_r,bw_mcol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_mbmat_alloc)
#pragma inline(mbmat_free)
#pragma inline(mbmat_pos)
#pragma inline(mbmat_scal)
#pragma inline(mbmat_head)
#pragma inline(mbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mbmat_alloc(x)		_mbmat_alloc(&(x))
FASTFUNC void*			_mbmat_alloc(bw_mbmat *);
FASTFUNC void			mbmat_free(bw_mbmat);
FASTFUNC mp_limb_t		mbmat_pos(bw_mbmat,  int, int, int);
FASTFUNC mp_limb_t *		mbmat_scal(bw_mbmat, int, int);
FASTFUNC void *			mbmat_head(bw_mbmat);
FASTFUNC void			mbmat_zero(bw_mbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(mbmat_col)
#pragma inline(mcol_copy)
#pragma inline(mcol_zero)
#pragma inline(mcol_scal)
#pragma inline(_mcol_alloc)
#pragma inline(mcol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	mcol_alloc(x)		_mcol_alloc(&(x))
FASTFUNC bw_mcol mbmat_col(bw_mbmat, int);
FASTFUNC void mcol_copy(bw_mcol, bw_mcol);
FASTFUNC void mcol_zero(bw_mcol);
FASTFUNC mp_limb_t * mcol_scal(bw_mcol, int);
FASTFUNC void * _mcol_alloc(bw_mcol *);
FASTFUNC void mcol_free(bw_mcol);

#else	/* PREFER_INLINES */

#define mbmat_alloc(x)		mbmat_alloc_m(STRICTTYPE_VAL(x))
#define mbmat_free(x)		mbmat_free_m(STRICTTYPE_VAL(x))
#define mbmat_pos(x,i,j,k)	mbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define mbmat_scal(x,i,j)	mbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define mbmat_head(x)		mbmat_head_m(STRICTTYPE_VAL(x))
#define mbmat_zero(x)		mbmat_zero_m(STRICTTYPE_VAL(x))
#define mbmat_copy(y,x)		mbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define mbmat_col(x,j)		STRICTTYPE_CAST(bw_mcol,mbmat_col_m(STRICTTYPE_VAL(x),j))
#define mcol_copy(y,x)		mcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define mcol_zero(x)		mcol_zero_m(STRICTTYPE_VAL(x))
#define mcol_scal(c,i)		mcol_scal_m(STRICTTYPE_VAL(c),i)
#define mcol_alloc(x)		mcol_alloc_m(STRICTTYPE_VAL(x))
#define mcol_free(x)		mcol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int mcol_is_zero(bw_mcol);


/*****************************************************************************/
/* Here are the definitions for bw_bbmat : bigdim x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_bbmat_r[bigdim][bigdim][bw_allocsize];
#define bbmat_pos_m(x,i,j,k)	x[j][i][k]
#define bbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define bbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_bbmat_r;
#define bbmat_pos_m(x,i,j,k)    *((x)+(k)+bw_allocsize*((i)+bigdim*(j)))
#define bbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+bw_allocsize*((i)+bigdim*(j))))
#define bbmat_col_m(x,j)	((mp_limb_t *) ((x)+bw_allocsize*bigdim*(j)))
#endif	/* HARDCODE_PARAMS */

#define bbmat_size		(bigdim*bigdim*bw_allocsize)
#ifdef HARDCODE_PARAMS
#define bbmat_alloc_m(x)	((void*)(x))
#define bbmat_free_m(x)
#define bbmat_head_m(x)		((void*) &(bbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define bbmat_alloc_m(x)	((void *) (x = (bw_bbmat_r) mymalloc(bbmat_size*sizeof(mp_limb_t))))
#define bbmat_free_m(x)		free(x)
#define bbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define bbmat_zero_m(x)		(void) memset(bbmat_head_m(x),0,bbmat_size*sizeof(mp_limb_t))
#define bbmat_copy_m(y,x)	(void) memcpy(y,x,bbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_bbmat_r,bw_bbmat);

#define bcol_size			(bigdim*bw_allocsize)
#define	bcol_copy_m(y,x)	(void) memcpy(y,x,bcol_size*sizeof(mp_limb_t))
#define	bcol_zero_m(x)		(void) memset(x,0,bcol_size*sizeof(mp_limb_t))
#define	bcol_scal_m(c,i)	((mp_limb_t *) ((c)+i*bw_allocsize))
#define bcol_alloc_m(x)	(x=(bw_bcol_r) mymalloc(bcol_size*sizeof(mp_limb_t)))
#define bcol_free_m(x)		free(x)
typedef mp_limb_t * bw_bcol_r;
STRICTTYPE_DECL(bw_bcol_r,bw_bcol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_bbmat_alloc)
#pragma inline(bbmat_free)
#pragma inline(bbmat_pos)
#pragma inline(bbmat_scal)
#pragma inline(bbmat_head)
#pragma inline(bbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define bbmat_alloc(x)		_bbmat_alloc(&(x))
FASTFUNC void*			_bbmat_alloc(bw_bbmat *);
FASTFUNC void			bbmat_free(bw_bbmat);
FASTFUNC mp_limb_t		bbmat_pos(bw_bbmat,  int, int, int);
FASTFUNC mp_limb_t *		bbmat_scal(bw_bbmat, int, int);
FASTFUNC void *			bbmat_head(bw_bbmat);
FASTFUNC void			bbmat_zero(bw_bbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(bbmat_col)
#pragma inline(bcol_copy)
#pragma inline(bcol_zero)
#pragma inline(bcol_scal)
#pragma inline(_bcol_alloc)
#pragma inline(bcol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	bcol_alloc(x)		_bcol_alloc(&(x))
FASTFUNC bw_bcol bbmat_col(bw_bbmat, int);
FASTFUNC void bcol_copy(bw_bcol, bw_bcol);
FASTFUNC void bcol_zero(bw_bcol);
FASTFUNC mp_limb_t * bcol_scal(bw_bcol, int);
FASTFUNC void * _bcol_alloc(bw_bcol *);
FASTFUNC void bcol_free(bw_bcol);

#else	/* PREFER_INLINES */

#define bbmat_alloc(x)		bbmat_alloc_m(STRICTTYPE_VAL(x))
#define bbmat_free(x)		bbmat_free_m(STRICTTYPE_VAL(x))
#define bbmat_pos(x,i,j,k)	bbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define bbmat_scal(x,i,j)	bbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define bbmat_head(x)		bbmat_head_m(STRICTTYPE_VAL(x))
#define bbmat_zero(x)		bbmat_zero_m(STRICTTYPE_VAL(x))
#define bbmat_copy(y,x)		bbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define bbmat_col(x,j)		STRICTTYPE_CAST(bw_bcol,bbmat_col_m(STRICTTYPE_VAL(x),j))
#define bcol_copy(y,x)		bcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define bcol_zero(x)		bcol_zero_m(STRICTTYPE_VAL(x))
#define bcol_scal(c,i)		bcol_scal_m(STRICTTYPE_VAL(c),i)
#define bcol_alloc(x)		bcol_alloc_m(STRICTTYPE_VAL(x))
#define bcol_free(x)		bcol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int bcol_is_zero(bw_bcol);


/*****************************************************************************/
/* Here are the definitions for bw_mnpoly : bw_mnmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_mnmat_r		      * bw_mnpoly_r;
#define mnpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_mnmat_r			bw_mnpoly_r;
#define mnpoly_coeff_m(x,t)	((x)+(t)*(mnmat_size))
#endif	/* HARDCODE_PARAMS */
#define mnpoly_alloc_m(x,d)	(x=(bw_mnpoly_r) mymalloc(mnmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define mnpoly_zero_m(x,d)	(void) memset(x,0,mnmat_size * ((d)+1) * sizeof(mp_limb_t))
#define mnpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_mnpoly_r, bw_mnpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(mnpoly_coeff)
#pragma inline(mnpoly_subpoly)
#pragma inline(_mnpoly_alloc)
#pragma inline(mnpoly_zero)
#pragma inline(mnpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mnpoly_alloc(x,d)	_mnpoly_alloc(&(x),d)
FASTFUNC bw_mnmat			mnpoly_coeff(bw_mnpoly, int);
FASTFUNC bw_mnpoly		mnpoly_subpoly(bw_mnpoly x, int t);
FASTFUNC void *			_mnpoly_alloc(bw_mnpoly *, int);
FASTFUNC void			mnpoly_zero(bw_mnpoly, int);
FASTFUNC void			mnpoly_free(bw_mnpoly);

#else	/* PREFER_INLINES */

#define mnpoly_coeff(x,t)	STRICTTYPE_CAST(bw_mnmat,mnpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define mnpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_mnpoly,mnpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define mnpoly_alloc(x,d)	mnpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define mnpoly_zero(x,t)	mnpoly_zero_m(STRICTTYPE_VAL(x),t)
#define mnpoly_free(x)		mnpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_nbpoly : bw_nbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_nbmat_r		      * bw_nbpoly_r;
#define nbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_nbmat_r			bw_nbpoly_r;
#define nbpoly_coeff_m(x,t)	((x)+(t)*(nbmat_size))
#endif	/* HARDCODE_PARAMS */
#define nbpoly_alloc_m(x,d)	(x=(bw_nbpoly_r) mymalloc(nbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define nbpoly_zero_m(x,d)	(void) memset(x,0,nbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define nbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_nbpoly_r, bw_nbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(nbpoly_coeff)
#pragma inline(nbpoly_subpoly)
#pragma inline(_nbpoly_alloc)
#pragma inline(nbpoly_zero)
#pragma inline(nbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define nbpoly_alloc(x,d)	_nbpoly_alloc(&(x),d)
FASTFUNC bw_nbmat			nbpoly_coeff(bw_nbpoly, int);
FASTFUNC bw_nbpoly		nbpoly_subpoly(bw_nbpoly x, int t);
FASTFUNC void *			_nbpoly_alloc(bw_nbpoly *, int);
FASTFUNC void			nbpoly_zero(bw_nbpoly, int);
FASTFUNC void			nbpoly_free(bw_nbpoly);

#else	/* PREFER_INLINES */

#define nbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_nbmat,nbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define nbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_nbpoly,nbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define nbpoly_alloc(x,d)	nbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define nbpoly_zero(x,t)	nbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define nbpoly_free(x)		nbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_mbpoly : bw_mbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_mbmat_r		      * bw_mbpoly_r;
#define mbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_mbmat_r			bw_mbpoly_r;
#define mbpoly_coeff_m(x,t)	((x)+(t)*(mbmat_size))
#endif	/* HARDCODE_PARAMS */
#define mbpoly_alloc_m(x,d)	(x=(bw_mbpoly_r) mymalloc(mbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define mbpoly_zero_m(x,d)	(void) memset(x,0,mbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define mbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_mbpoly_r, bw_mbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(mbpoly_coeff)
#pragma inline(mbpoly_subpoly)
#pragma inline(_mbpoly_alloc)
#pragma inline(mbpoly_zero)
#pragma inline(mbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mbpoly_alloc(x,d)	_mbpoly_alloc(&(x),d)
FASTFUNC bw_mbmat			mbpoly_coeff(bw_mbpoly, int);
FASTFUNC bw_mbpoly		mbpoly_subpoly(bw_mbpoly x, int t);
FASTFUNC void *			_mbpoly_alloc(bw_mbpoly *, int);
FASTFUNC void			mbpoly_zero(bw_mbpoly, int);
FASTFUNC void			mbpoly_free(bw_mbpoly);

#else	/* PREFER_INLINES */

#define mbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_mbmat,mbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define mbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_mbpoly,mbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define mbpoly_alloc(x,d)	mbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define mbpoly_zero(x,t)	mbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define mbpoly_free(x)		mbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_bbpoly : bw_bbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_bbmat_r		      * bw_bbpoly_r;
#define bbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_bbmat_r			bw_bbpoly_r;
#define bbpoly_coeff_m(x,t)	((x)+(t)*(bbmat_size))
#endif	/* HARDCODE_PARAMS */
#define bbpoly_alloc_m(x,d)	(x=(bw_bbpoly_r) mymalloc(bbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define bbpoly_zero_m(x,d)	(void) memset(x,0,bbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define bbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_bbpoly_r, bw_bbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(bbpoly_coeff)
#pragma inline(bbpoly_subpoly)
#pragma inline(_bbpoly_alloc)
#pragma inline(bbpoly_zero)
#pragma inline(bbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define bbpoly_alloc(x,d)	_bbpoly_alloc(&(x),d)
FASTFUNC bw_bbmat			bbpoly_coeff(bw_bbpoly, int);
FASTFUNC bw_bbpoly		bbpoly_subpoly(bw_bbpoly x, int t);
FASTFUNC void *			_bbpoly_alloc(bw_bbpoly *, int);
FASTFUNC void			bbpoly_zero(bw_bbpoly, int);
FASTFUNC void			bbpoly_free(bw_bbpoly);

#else	/* PREFER_INLINES */

#define bbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_bbmat,bbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define bbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_bbpoly,bbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define bbpoly_alloc(x,d)	bbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define bbpoly_zero(x,t)	bbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define bbpoly_free(x)		bbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

#ifndef EXTFIELD_SIZE
#ifdef HAS_NATIVE_FFT
#define EXTFIELD_SIZE	bw_allocsize
#else	/* HAS_NATIVE_FFT */
#define EXTFIELD_SIZE   (bw_allocsize<<1)
#endif	/* HAS_NATIVE_FFT */
#endif

/*****************************************************************************/
/* Here are the definitions for bw_x_mnmat : m_param x n_param matrices, line local */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef mp_limb_t		bw_x_mnmat_r[m_param][n_param][EXTFIELD_SIZE];
#define x_mnmat_pos_m(x,i,j,k)	x[i][j][k]
#define x_mnmat_scal_m(x,i,j)	((mp_limb_t *) (x[i][j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_x_mnmat_r;
#define x_mnmat_pos_m(x,i,j,k)    *((x)+(k)+EXTFIELD_SIZE*((j)+n_param*(i)))
#define x_mnmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+EXTFIELD_SIZE*((j)+n_param*(i))))
#endif	/* HARDCODE_PARAMS */

#define x_mnmat_size		(m_param*n_param*EXTFIELD_SIZE)
#ifdef HARDCODE_PARAMS
#define x_mnmat_alloc_m(x)	((void*)(x))
#define x_mnmat_free_m(x)
#define x_mnmat_head_m(x)		((void*) &(x_mnmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define x_mnmat_alloc_m(x)	((void *) (x = (bw_x_mnmat_r) mymalloc(x_mnmat_size*sizeof(mp_limb_t))))
#define x_mnmat_free_m(x)		free(x)
#define x_mnmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define x_mnmat_zero_m(x)		(void) memset(x_mnmat_head_m(x),0,x_mnmat_size*sizeof(mp_limb_t))
#define x_mnmat_copy_m(y,x)	(void) memcpy(y,x,x_mnmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_x_mnmat_r,bw_x_mnmat);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_x_mnmat_alloc)
#pragma inline(x_mnmat_free)
#pragma inline(x_mnmat_pos)
#pragma inline(x_mnmat_scal)
#pragma inline(x_mnmat_head)
#pragma inline(x_mnmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_mnmat_alloc(x)		_x_mnmat_alloc(&(x))
FASTFUNC void*			_x_mnmat_alloc(bw_x_mnmat *);
FASTFUNC void			x_mnmat_free(bw_x_mnmat);
FASTFUNC mp_limb_t		x_mnmat_pos(bw_x_mnmat,  int, int, int);
FASTFUNC mp_limb_t *		x_mnmat_scal(bw_x_mnmat, int, int);
FASTFUNC void *			x_mnmat_head(bw_x_mnmat);
FASTFUNC void			x_mnmat_zero(bw_x_mnmat);

#else	/* PREFER_INLINES */

#define x_mnmat_alloc(x)		x_mnmat_alloc_m(STRICTTYPE_VAL(x))
#define x_mnmat_free(x)		x_mnmat_free_m(STRICTTYPE_VAL(x))
#define x_mnmat_pos(x,i,j,k)	x_mnmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define x_mnmat_scal(x,i,j)	x_mnmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define x_mnmat_head(x)		x_mnmat_head_m(STRICTTYPE_VAL(x))
#define x_mnmat_zero(x)		x_mnmat_zero_m(STRICTTYPE_VAL(x))
#define x_mnmat_copy(y,x)		x_mnmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_x_nbmat : n_param x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_x_nbmat_r[bigdim][n_param][EXTFIELD_SIZE];
#define x_nbmat_pos_m(x,i,j,k)	x[j][i][k]
#define x_nbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define x_nbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_x_nbmat_r;
#define x_nbmat_pos_m(x,i,j,k)    *((x)+(k)+EXTFIELD_SIZE*((i)+n_param*(j)))
#define x_nbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+EXTFIELD_SIZE*((i)+n_param*(j))))
#define x_nbmat_col_m(x,j)	((mp_limb_t *) ((x)+EXTFIELD_SIZE*n_param*(j)))
#endif	/* HARDCODE_PARAMS */

#define x_nbmat_size		(n_param*bigdim*EXTFIELD_SIZE)
#ifdef HARDCODE_PARAMS
#define x_nbmat_alloc_m(x)	((void*)(x))
#define x_nbmat_free_m(x)
#define x_nbmat_head_m(x)		((void*) &(x_nbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define x_nbmat_alloc_m(x)	((void *) (x = (bw_x_nbmat_r) mymalloc(x_nbmat_size*sizeof(mp_limb_t))))
#define x_nbmat_free_m(x)		free(x)
#define x_nbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define x_nbmat_zero_m(x)		(void) memset(x_nbmat_head_m(x),0,x_nbmat_size*sizeof(mp_limb_t))
#define x_nbmat_copy_m(y,x)	(void) memcpy(y,x,x_nbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_x_nbmat_r,bw_x_nbmat);

#define x_ncol_size			(n_param*EXTFIELD_SIZE)
#define	x_ncol_copy_m(y,x)	(void) memcpy(y,x,x_ncol_size*sizeof(mp_limb_t))
#define	x_ncol_zero_m(x)		(void) memset(x,0,x_ncol_size*sizeof(mp_limb_t))
#define	x_ncol_scal_m(c,i)	((mp_limb_t *) ((c)+i*EXTFIELD_SIZE))
#define x_ncol_alloc_m(x)	(x=(bw_x_ncol_r) mymalloc(x_ncol_size*sizeof(mp_limb_t)))
#define x_ncol_free_m(x)		free(x)
typedef mp_limb_t * bw_x_ncol_r;
STRICTTYPE_DECL(bw_x_ncol_r,bw_x_ncol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_x_nbmat_alloc)
#pragma inline(x_nbmat_free)
#pragma inline(x_nbmat_pos)
#pragma inline(x_nbmat_scal)
#pragma inline(x_nbmat_head)
#pragma inline(x_nbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_nbmat_alloc(x)		_x_nbmat_alloc(&(x))
FASTFUNC void*			_x_nbmat_alloc(bw_x_nbmat *);
FASTFUNC void			x_nbmat_free(bw_x_nbmat);
FASTFUNC mp_limb_t		x_nbmat_pos(bw_x_nbmat,  int, int, int);
FASTFUNC mp_limb_t *		x_nbmat_scal(bw_x_nbmat, int, int);
FASTFUNC void *			x_nbmat_head(bw_x_nbmat);
FASTFUNC void			x_nbmat_zero(bw_x_nbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_nbmat_col)
#pragma inline(x_ncol_copy)
#pragma inline(x_ncol_zero)
#pragma inline(x_ncol_scal)
#pragma inline(_x_ncol_alloc)
#pragma inline(x_ncol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	x_ncol_alloc(x)		_x_ncol_alloc(&(x))
FASTFUNC bw_x_ncol x_nbmat_col(bw_x_nbmat, int);
FASTFUNC void x_ncol_copy(bw_x_ncol, bw_x_ncol);
FASTFUNC void x_ncol_zero(bw_x_ncol);
FASTFUNC mp_limb_t * x_ncol_scal(bw_x_ncol, int);
FASTFUNC void * _x_ncol_alloc(bw_x_ncol *);
FASTFUNC void x_ncol_free(bw_x_ncol);

#else	/* PREFER_INLINES */

#define x_nbmat_alloc(x)		x_nbmat_alloc_m(STRICTTYPE_VAL(x))
#define x_nbmat_free(x)		x_nbmat_free_m(STRICTTYPE_VAL(x))
#define x_nbmat_pos(x,i,j,k)	x_nbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define x_nbmat_scal(x,i,j)	x_nbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define x_nbmat_head(x)		x_nbmat_head_m(STRICTTYPE_VAL(x))
#define x_nbmat_zero(x)		x_nbmat_zero_m(STRICTTYPE_VAL(x))
#define x_nbmat_copy(y,x)		x_nbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define x_nbmat_col(x,j)		STRICTTYPE_CAST(bw_x_ncol,x_nbmat_col_m(STRICTTYPE_VAL(x),j))
#define x_ncol_copy(y,x)		x_ncol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define x_ncol_zero(x)		x_ncol_zero_m(STRICTTYPE_VAL(x))
#define x_ncol_scal(c,i)		x_ncol_scal_m(STRICTTYPE_VAL(c),i)
#define x_ncol_alloc(x)		x_ncol_alloc_m(STRICTTYPE_VAL(x))
#define x_ncol_free(x)		x_ncol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int x_ncol_is_zero(bw_x_ncol);


/*****************************************************************************/
/* Here are the definitions for bw_x_mbmat : m_param x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_x_mbmat_r[bigdim][m_param][EXTFIELD_SIZE];
#define x_mbmat_pos_m(x,i,j,k)	x[j][i][k]
#define x_mbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define x_mbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_x_mbmat_r;
#define x_mbmat_pos_m(x,i,j,k)    *((x)+(k)+EXTFIELD_SIZE*((i)+m_param*(j)))
#define x_mbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+EXTFIELD_SIZE*((i)+m_param*(j))))
#define x_mbmat_col_m(x,j)	((mp_limb_t *) ((x)+EXTFIELD_SIZE*m_param*(j)))
#endif	/* HARDCODE_PARAMS */

#define x_mbmat_size		(m_param*bigdim*EXTFIELD_SIZE)
#ifdef HARDCODE_PARAMS
#define x_mbmat_alloc_m(x)	((void*)(x))
#define x_mbmat_free_m(x)
#define x_mbmat_head_m(x)		((void*) &(x_mbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define x_mbmat_alloc_m(x)	((void *) (x = (bw_x_mbmat_r) mymalloc(x_mbmat_size*sizeof(mp_limb_t))))
#define x_mbmat_free_m(x)		free(x)
#define x_mbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define x_mbmat_zero_m(x)		(void) memset(x_mbmat_head_m(x),0,x_mbmat_size*sizeof(mp_limb_t))
#define x_mbmat_copy_m(y,x)	(void) memcpy(y,x,x_mbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_x_mbmat_r,bw_x_mbmat);

#define x_mcol_size			(m_param*EXTFIELD_SIZE)
#define	x_mcol_copy_m(y,x)	(void) memcpy(y,x,x_mcol_size*sizeof(mp_limb_t))
#define	x_mcol_zero_m(x)		(void) memset(x,0,x_mcol_size*sizeof(mp_limb_t))
#define	x_mcol_scal_m(c,i)	((mp_limb_t *) ((c)+i*EXTFIELD_SIZE))
#define x_mcol_alloc_m(x)	(x=(bw_x_mcol_r) mymalloc(x_mcol_size*sizeof(mp_limb_t)))
#define x_mcol_free_m(x)		free(x)
typedef mp_limb_t * bw_x_mcol_r;
STRICTTYPE_DECL(bw_x_mcol_r,bw_x_mcol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_x_mbmat_alloc)
#pragma inline(x_mbmat_free)
#pragma inline(x_mbmat_pos)
#pragma inline(x_mbmat_scal)
#pragma inline(x_mbmat_head)
#pragma inline(x_mbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_mbmat_alloc(x)		_x_mbmat_alloc(&(x))
FASTFUNC void*			_x_mbmat_alloc(bw_x_mbmat *);
FASTFUNC void			x_mbmat_free(bw_x_mbmat);
FASTFUNC mp_limb_t		x_mbmat_pos(bw_x_mbmat,  int, int, int);
FASTFUNC mp_limb_t *		x_mbmat_scal(bw_x_mbmat, int, int);
FASTFUNC void *			x_mbmat_head(bw_x_mbmat);
FASTFUNC void			x_mbmat_zero(bw_x_mbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_mbmat_col)
#pragma inline(x_mcol_copy)
#pragma inline(x_mcol_zero)
#pragma inline(x_mcol_scal)
#pragma inline(_x_mcol_alloc)
#pragma inline(x_mcol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	x_mcol_alloc(x)		_x_mcol_alloc(&(x))
FASTFUNC bw_x_mcol x_mbmat_col(bw_x_mbmat, int);
FASTFUNC void x_mcol_copy(bw_x_mcol, bw_x_mcol);
FASTFUNC void x_mcol_zero(bw_x_mcol);
FASTFUNC mp_limb_t * x_mcol_scal(bw_x_mcol, int);
FASTFUNC void * _x_mcol_alloc(bw_x_mcol *);
FASTFUNC void x_mcol_free(bw_x_mcol);

#else	/* PREFER_INLINES */

#define x_mbmat_alloc(x)		x_mbmat_alloc_m(STRICTTYPE_VAL(x))
#define x_mbmat_free(x)		x_mbmat_free_m(STRICTTYPE_VAL(x))
#define x_mbmat_pos(x,i,j,k)	x_mbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define x_mbmat_scal(x,i,j)	x_mbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define x_mbmat_head(x)		x_mbmat_head_m(STRICTTYPE_VAL(x))
#define x_mbmat_zero(x)		x_mbmat_zero_m(STRICTTYPE_VAL(x))
#define x_mbmat_copy(y,x)		x_mbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define x_mbmat_col(x,j)		STRICTTYPE_CAST(bw_x_mcol,x_mbmat_col_m(STRICTTYPE_VAL(x),j))
#define x_mcol_copy(y,x)		x_mcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define x_mcol_zero(x)		x_mcol_zero_m(STRICTTYPE_VAL(x))
#define x_mcol_scal(c,i)		x_mcol_scal_m(STRICTTYPE_VAL(c),i)
#define x_mcol_alloc(x)		x_mcol_alloc_m(STRICTTYPE_VAL(x))
#define x_mcol_free(x)		x_mcol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int x_mcol_is_zero(bw_x_mcol);


/*****************************************************************************/
/* Here are the definitions for bw_x_bbmat : bigdim x bigdim matrices, column local */
/*****************************************************************************/

#ifdef HARDCODE_PARAMS
typedef mp_limb_t		bw_x_bbmat_r[bigdim][bigdim][EXTFIELD_SIZE];
#define x_bbmat_pos_m(x,i,j,k)	x[j][i][k]
#define x_bbmat_scal_m(x,i,j)	((mp_limb_t *) (x[j][i]))
#define x_bbmat_col_m(x,j)	((mp_limb_t *) (x[j]))
#else	/* HARDCODE_PARAMS */
typedef mp_limb_t		* bw_x_bbmat_r;
#define x_bbmat_pos_m(x,i,j,k)    *((x)+(k)+EXTFIELD_SIZE*((i)+bigdim*(j)))
#define x_bbmat_scal_m(x,i,j)     ((mp_limb_t *) ((x)+EXTFIELD_SIZE*((i)+bigdim*(j))))
#define x_bbmat_col_m(x,j)	((mp_limb_t *) ((x)+EXTFIELD_SIZE*bigdim*(j)))
#endif	/* HARDCODE_PARAMS */

#define x_bbmat_size		(bigdim*bigdim*EXTFIELD_SIZE)
#ifdef HARDCODE_PARAMS
#define x_bbmat_alloc_m(x)	((void*)(x))
#define x_bbmat_free_m(x)
#define x_bbmat_head_m(x)		((void*) &(x_bbmat_pos_m(x,0,0,0)))
#else	/* HARDCODE_PARAMS */
#define x_bbmat_alloc_m(x)	((void *) (x = (bw_x_bbmat_r) mymalloc(x_bbmat_size*sizeof(mp_limb_t))))
#define x_bbmat_free_m(x)		free(x)
#define x_bbmat_head_m(x)		((void *) (x))
#endif	/* HARDCODE_PARAMS */
#define x_bbmat_zero_m(x)		(void) memset(x_bbmat_head_m(x),0,x_bbmat_size*sizeof(mp_limb_t))
#define x_bbmat_copy_m(y,x)	(void) memcpy(y,x,x_bbmat_size*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_x_bbmat_r,bw_x_bbmat);

#define x_bcol_size			(bigdim*EXTFIELD_SIZE)
#define	x_bcol_copy_m(y,x)	(void) memcpy(y,x,x_bcol_size*sizeof(mp_limb_t))
#define	x_bcol_zero_m(x)		(void) memset(x,0,x_bcol_size*sizeof(mp_limb_t))
#define	x_bcol_scal_m(c,i)	((mp_limb_t *) ((c)+i*EXTFIELD_SIZE))
#define x_bcol_alloc_m(x)	(x=(bw_x_bcol_r) mymalloc(x_bcol_size*sizeof(mp_limb_t)))
#define x_bcol_free_m(x)		free(x)
typedef mp_limb_t * bw_x_bcol_r;
STRICTTYPE_DECL(bw_x_bcol_r,bw_x_bcol);

#ifdef	PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_x_bbmat_alloc)
#pragma inline(x_bbmat_free)
#pragma inline(x_bbmat_pos)
#pragma inline(x_bbmat_scal)
#pragma inline(x_bbmat_head)
#pragma inline(x_bbmat_zero)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_bbmat_alloc(x)		_x_bbmat_alloc(&(x))
FASTFUNC void*			_x_bbmat_alloc(bw_x_bbmat *);
FASTFUNC void			x_bbmat_free(bw_x_bbmat);
FASTFUNC mp_limb_t		x_bbmat_pos(bw_x_bbmat,  int, int, int);
FASTFUNC mp_limb_t *		x_bbmat_scal(bw_x_bbmat, int, int);
FASTFUNC void *			x_bbmat_head(bw_x_bbmat);
FASTFUNC void			x_bbmat_zero(bw_x_bbmat);

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_bbmat_col)
#pragma inline(x_bcol_copy)
#pragma inline(x_bcol_zero)
#pragma inline(x_bcol_scal)
#pragma inline(_x_bcol_alloc)
#pragma inline(x_bcol_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define	x_bcol_alloc(x)		_x_bcol_alloc(&(x))
FASTFUNC bw_x_bcol x_bbmat_col(bw_x_bbmat, int);
FASTFUNC void x_bcol_copy(bw_x_bcol, bw_x_bcol);
FASTFUNC void x_bcol_zero(bw_x_bcol);
FASTFUNC mp_limb_t * x_bcol_scal(bw_x_bcol, int);
FASTFUNC void * _x_bcol_alloc(bw_x_bcol *);
FASTFUNC void x_bcol_free(bw_x_bcol);

#else	/* PREFER_INLINES */

#define x_bbmat_alloc(x)		x_bbmat_alloc_m(STRICTTYPE_VAL(x))
#define x_bbmat_free(x)		x_bbmat_free_m(STRICTTYPE_VAL(x))
#define x_bbmat_pos(x,i,j,k)	x_bbmat_pos_m(STRICTTYPE_VAL(x),i,j,k)
#define x_bbmat_scal(x,i,j)	x_bbmat_scal_m(STRICTTYPE_VAL(x),i,j)
#define x_bbmat_head(x)		x_bbmat_head_m(STRICTTYPE_VAL(x))
#define x_bbmat_zero(x)		x_bbmat_zero_m(STRICTTYPE_VAL(x))
#define x_bbmat_copy(y,x)		x_bbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#define x_bbmat_col(x,j)		STRICTTYPE_CAST(bw_x_bcol,x_bbmat_col_m(STRICTTYPE_VAL(x),j))
#define x_bcol_copy(y,x)		x_bcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))
#define x_bcol_zero(x)		x_bcol_zero_m(STRICTTYPE_VAL(x))
#define x_bcol_scal(c,i)		x_bcol_scal_m(STRICTTYPE_VAL(c),i)
#define x_bcol_alloc(x)		x_bcol_alloc_m(STRICTTYPE_VAL(x))
#define x_bcol_free(x)		x_bcol_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

FASTFUNC int x_bcol_is_zero(bw_x_bcol);


/*****************************************************************************/
/* Here are the definitions for bw_x_mnpoly : bw_x_mnmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_x_mnmat_r		      * bw_x_mnpoly_r;
#define x_mnpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_x_mnmat_r			bw_x_mnpoly_r;
#define x_mnpoly_coeff_m(x,t)	((x)+(t)*(x_mnmat_size))
#endif	/* HARDCODE_PARAMS */
#define x_mnpoly_alloc_m(x,d)	(x=(bw_x_mnpoly_r) mymalloc(x_mnmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define x_mnpoly_zero_m(x,d)	(void) memset(x,0,x_mnmat_size * ((d)+1) * sizeof(mp_limb_t))
#define x_mnpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_x_mnpoly_r, bw_x_mnpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_mnpoly_coeff)
#pragma inline(x_mnpoly_subpoly)
#pragma inline(_x_mnpoly_alloc)
#pragma inline(x_mnpoly_zero)
#pragma inline(x_mnpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_mnpoly_alloc(x,d)	_x_mnpoly_alloc(&(x),d)
FASTFUNC bw_x_mnmat			x_mnpoly_coeff(bw_x_mnpoly, int);
FASTFUNC bw_x_mnpoly		x_mnpoly_subpoly(bw_x_mnpoly x, int t);
FASTFUNC void *			_x_mnpoly_alloc(bw_x_mnpoly *, int);
FASTFUNC void			x_mnpoly_zero(bw_x_mnpoly, int);
FASTFUNC void			x_mnpoly_free(bw_x_mnpoly);

#else	/* PREFER_INLINES */

#define x_mnpoly_coeff(x,t)	STRICTTYPE_CAST(bw_x_mnmat,x_mnpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_mnpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_x_mnpoly,x_mnpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_mnpoly_alloc(x,d)	x_mnpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define x_mnpoly_zero(x,t)	x_mnpoly_zero_m(STRICTTYPE_VAL(x),t)
#define x_mnpoly_free(x)		x_mnpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_x_nbpoly : bw_x_nbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_x_nbmat_r		      * bw_x_nbpoly_r;
#define x_nbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_x_nbmat_r			bw_x_nbpoly_r;
#define x_nbpoly_coeff_m(x,t)	((x)+(t)*(x_nbmat_size))
#endif	/* HARDCODE_PARAMS */
#define x_nbpoly_alloc_m(x,d)	(x=(bw_x_nbpoly_r) mymalloc(x_nbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define x_nbpoly_zero_m(x,d)	(void) memset(x,0,x_nbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define x_nbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_x_nbpoly_r, bw_x_nbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_nbpoly_coeff)
#pragma inline(x_nbpoly_subpoly)
#pragma inline(_x_nbpoly_alloc)
#pragma inline(x_nbpoly_zero)
#pragma inline(x_nbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_nbpoly_alloc(x,d)	_x_nbpoly_alloc(&(x),d)
FASTFUNC bw_x_nbmat			x_nbpoly_coeff(bw_x_nbpoly, int);
FASTFUNC bw_x_nbpoly		x_nbpoly_subpoly(bw_x_nbpoly x, int t);
FASTFUNC void *			_x_nbpoly_alloc(bw_x_nbpoly *, int);
FASTFUNC void			x_nbpoly_zero(bw_x_nbpoly, int);
FASTFUNC void			x_nbpoly_free(bw_x_nbpoly);

#else	/* PREFER_INLINES */

#define x_nbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_x_nbmat,x_nbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_nbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_x_nbpoly,x_nbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_nbpoly_alloc(x,d)	x_nbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define x_nbpoly_zero(x,t)	x_nbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define x_nbpoly_free(x)		x_nbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_x_mbpoly : bw_x_mbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_x_mbmat_r		      * bw_x_mbpoly_r;
#define x_mbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_x_mbmat_r			bw_x_mbpoly_r;
#define x_mbpoly_coeff_m(x,t)	((x)+(t)*(x_mbmat_size))
#endif	/* HARDCODE_PARAMS */
#define x_mbpoly_alloc_m(x,d)	(x=(bw_x_mbpoly_r) mymalloc(x_mbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define x_mbpoly_zero_m(x,d)	(void) memset(x,0,x_mbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define x_mbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_x_mbpoly_r, bw_x_mbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_mbpoly_coeff)
#pragma inline(x_mbpoly_subpoly)
#pragma inline(_x_mbpoly_alloc)
#pragma inline(x_mbpoly_zero)
#pragma inline(x_mbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_mbpoly_alloc(x,d)	_x_mbpoly_alloc(&(x),d)
FASTFUNC bw_x_mbmat			x_mbpoly_coeff(bw_x_mbpoly, int);
FASTFUNC bw_x_mbpoly		x_mbpoly_subpoly(bw_x_mbpoly x, int t);
FASTFUNC void *			_x_mbpoly_alloc(bw_x_mbpoly *, int);
FASTFUNC void			x_mbpoly_zero(bw_x_mbpoly, int);
FASTFUNC void			x_mbpoly_free(bw_x_mbpoly);

#else	/* PREFER_INLINES */

#define x_mbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_x_mbmat,x_mbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_mbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_x_mbpoly,x_mbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_mbpoly_alloc(x,d)	x_mbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define x_mbpoly_zero(x,t)	x_mbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define x_mbpoly_free(x)		x_mbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_x_bbpoly : bw_x_bbmat - polynomials */
/*****************************************************************************/

#ifdef	HARDCODE_PARAMS
typedef	bw_x_bbmat_r		      * bw_x_bbpoly_r;
#define x_bbpoly_coeff_m(x,t)	x[t]
#else	/* HARDCODE_PARAMS */
typedef bw_x_bbmat_r			bw_x_bbpoly_r;
#define x_bbpoly_coeff_m(x,t)	((x)+(t)*(x_bbmat_size))
#endif	/* HARDCODE_PARAMS */
#define x_bbpoly_alloc_m(x,d)	(x=(bw_x_bbpoly_r) mymalloc(x_bbmat_size * ((d)+1) * sizeof(mp_limb_t)))
#define x_bbpoly_zero_m(x,d)	(void) memset(x,0,x_bbmat_size * ((d)+1) * sizeof(mp_limb_t))
#define x_bbpoly_free_m(x)	free(x)
STRICTTYPE_DECL(bw_x_bbpoly_r, bw_x_bbpoly);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(x_bbpoly_coeff)
#pragma inline(x_bbpoly_subpoly)
#pragma inline(_x_bbpoly_alloc)
#pragma inline(x_bbpoly_zero)
#pragma inline(x_bbpoly_free)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define x_bbpoly_alloc(x,d)	_x_bbpoly_alloc(&(x),d)
FASTFUNC bw_x_bbmat			x_bbpoly_coeff(bw_x_bbpoly, int);
FASTFUNC bw_x_bbpoly		x_bbpoly_subpoly(bw_x_bbpoly x, int t);
FASTFUNC void *			_x_bbpoly_alloc(bw_x_bbpoly *, int);
FASTFUNC void			x_bbpoly_zero(bw_x_bbpoly, int);
FASTFUNC void			x_bbpoly_free(bw_x_bbpoly);

#else	/* PREFER_INLINES */

#define x_bbpoly_coeff(x,t)	STRICTTYPE_CAST(bw_x_bbmat,x_bbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_bbpoly_subpoly(x,t)	STRICTTYPE_CAST(bw_x_bbpoly,x_bbpoly_coeff_m(STRICTTYPE_VAL(x),t))
#define x_bbpoly_alloc(x,d)	x_bbpoly_alloc_m(STRICTTYPE_VAL(x),d)
#define x_bbpoly_zero(x,t)	x_bbpoly_zero_m(STRICTTYPE_VAL(x),t)
#define x_bbpoly_free(x)		x_bbpoly_free_m(STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_mndft : m_param x n_param - DFTs */
/*****************************************************************************/

typedef mp_limb_t		* 	bw_mndft_r;
#define mndft_poly_m(s,x,i,j)	((x)+((EXTFIELD_SIZE)<<(s))*((i)+m_param*(j)))
#define mndft_scal_m(s,x,i,j,k)	(mndft_poly_m((s),(x),(i),(j))+((EXTFIELD_SIZE)*k))
#define mndft_size(s)		((m_param*n_param*EXTFIELD_SIZE)<<(s))
#define mndft_alloc_m(s,x)	(x = (bw_mndft_r) mymalloc(mndft_size((s))*sizeof(mp_limb_t)))
#define mndft_free_m(s,x)	free(x)
#define mndft_head_m(s,x)	(x)
#define mndft_zero_m(s,x)	(void) memset(mndft_head_m((s),(x)),0,mndft_size((s))*sizeof(mp_limb_t))
#define mndft_copy_m(s,y,x)	(void) memcpy((y),(x),mndft_size((s))*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_mndft_r,bw_mndft);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_mndft_alloc)
#pragma inline(mndft_free)
#pragma inline(mndft_poly)
#pragma inline(mndft_scal)
#pragma inline(mndft_head)
#pragma inline(mndft_zero)
#pragma inline(mndft_copy)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mndft_alloc(s, x)	_mndft_alloc((s), &(x))
FASTFUNC void*			_mndft_alloc(int, bw_mndft *);
FASTFUNC void			mndft_free(int, bw_mndft);
FASTFUNC mp_limb_t *		mndft_poly(int, bw_mndft, int, int);
FASTFUNC mp_limb_t *		mndft_scal(int, bw_mndft, int, int, int);
FASTFUNC void *			mndft_head(int, bw_mndft);
FASTFUNC void			mndft_zero(int, bw_mndft);

#else	/* PREFER_INLINES */

#define mndft_alloc(s,x)	mndft_alloc_m((s),STRICTTYPE_VAL(x))
#define mndft_free(s,x)		mndft_free_m((s),STRICTTYPE_VAL(x))
#define mndft_poly(s,x,i,j)	mndft_poly_m((s),STRICTTYPE_VAL(x),i,j)
#define mndft_scal(s,x,i,j,k)	mndft_scal_m((s),STRICTTYPE_VAL(x),i,j,k)
#define mndft_head(s,x)		mndft_head_m((s),STRICTTYPE_VAL(x))
#define mndft_zero(s,x)		mndft_zero_m((s),STRICTTYPE_VAL(x))
#define mndft_copy(s,y,x)	mndft_copy_m((s),STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_nbdft : n_param x bigdim - DFTs */
/*****************************************************************************/

typedef mp_limb_t		* 	bw_nbdft_r;
#define nbdft_poly_m(s,x,i,j)	((x)+((EXTFIELD_SIZE)<<(s))*((i)+n_param*(j)))
#define nbdft_scal_m(s,x,i,j,k)	(nbdft_poly_m((s),(x),(i),(j))+((EXTFIELD_SIZE)*k))
#define nbdft_size(s)		((n_param*bigdim*EXTFIELD_SIZE)<<(s))
#define nbdft_alloc_m(s,x)	(x = (bw_nbdft_r) mymalloc(nbdft_size((s))*sizeof(mp_limb_t)))
#define nbdft_free_m(s,x)	free(x)
#define nbdft_head_m(s,x)	(x)
#define nbdft_zero_m(s,x)	(void) memset(nbdft_head_m((s),(x)),0,nbdft_size((s))*sizeof(mp_limb_t))
#define nbdft_copy_m(s,y,x)	(void) memcpy((y),(x),nbdft_size((s))*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_nbdft_r,bw_nbdft);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_nbdft_alloc)
#pragma inline(nbdft_free)
#pragma inline(nbdft_poly)
#pragma inline(nbdft_scal)
#pragma inline(nbdft_head)
#pragma inline(nbdft_zero)
#pragma inline(nbdft_copy)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define nbdft_alloc(s, x)	_nbdft_alloc((s), &(x))
FASTFUNC void*			_nbdft_alloc(int, bw_nbdft *);
FASTFUNC void			nbdft_free(int, bw_nbdft);
FASTFUNC mp_limb_t *		nbdft_poly(int, bw_nbdft, int, int);
FASTFUNC mp_limb_t *		nbdft_scal(int, bw_nbdft, int, int, int);
FASTFUNC void *			nbdft_head(int, bw_nbdft);
FASTFUNC void			nbdft_zero(int, bw_nbdft);

#else	/* PREFER_INLINES */

#define nbdft_alloc(s,x)	nbdft_alloc_m((s),STRICTTYPE_VAL(x))
#define nbdft_free(s,x)		nbdft_free_m((s),STRICTTYPE_VAL(x))
#define nbdft_poly(s,x,i,j)	nbdft_poly_m((s),STRICTTYPE_VAL(x),i,j)
#define nbdft_scal(s,x,i,j,k)	nbdft_scal_m((s),STRICTTYPE_VAL(x),i,j,k)
#define nbdft_head(s,x)		nbdft_head_m((s),STRICTTYPE_VAL(x))
#define nbdft_zero(s,x)		nbdft_zero_m((s),STRICTTYPE_VAL(x))
#define nbdft_copy(s,y,x)	nbdft_copy_m((s),STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_mbdft : m_param x bigdim - DFTs */
/*****************************************************************************/

typedef mp_limb_t		* 	bw_mbdft_r;
#define mbdft_poly_m(s,x,i,j)	((x)+((EXTFIELD_SIZE)<<(s))*((i)+m_param*(j)))
#define mbdft_scal_m(s,x,i,j,k)	(mbdft_poly_m((s),(x),(i),(j))+((EXTFIELD_SIZE)*k))
#define mbdft_size(s)		((m_param*bigdim*EXTFIELD_SIZE)<<(s))
#define mbdft_alloc_m(s,x)	(x = (bw_mbdft_r) mymalloc(mbdft_size((s))*sizeof(mp_limb_t)))
#define mbdft_free_m(s,x)	free(x)
#define mbdft_head_m(s,x)	(x)
#define mbdft_zero_m(s,x)	(void) memset(mbdft_head_m((s),(x)),0,mbdft_size((s))*sizeof(mp_limb_t))
#define mbdft_copy_m(s,y,x)	(void) memcpy((y),(x),mbdft_size((s))*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_mbdft_r,bw_mbdft);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_mbdft_alloc)
#pragma inline(mbdft_free)
#pragma inline(mbdft_poly)
#pragma inline(mbdft_scal)
#pragma inline(mbdft_head)
#pragma inline(mbdft_zero)
#pragma inline(mbdft_copy)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define mbdft_alloc(s, x)	_mbdft_alloc((s), &(x))
FASTFUNC void*			_mbdft_alloc(int, bw_mbdft *);
FASTFUNC void			mbdft_free(int, bw_mbdft);
FASTFUNC mp_limb_t *		mbdft_poly(int, bw_mbdft, int, int);
FASTFUNC mp_limb_t *		mbdft_scal(int, bw_mbdft, int, int, int);
FASTFUNC void *			mbdft_head(int, bw_mbdft);
FASTFUNC void			mbdft_zero(int, bw_mbdft);

#else	/* PREFER_INLINES */

#define mbdft_alloc(s,x)	mbdft_alloc_m((s),STRICTTYPE_VAL(x))
#define mbdft_free(s,x)		mbdft_free_m((s),STRICTTYPE_VAL(x))
#define mbdft_poly(s,x,i,j)	mbdft_poly_m((s),STRICTTYPE_VAL(x),i,j)
#define mbdft_scal(s,x,i,j,k)	mbdft_scal_m((s),STRICTTYPE_VAL(x),i,j,k)
#define mbdft_head(s,x)		mbdft_head_m((s),STRICTTYPE_VAL(x))
#define mbdft_zero(s,x)		mbdft_zero_m((s),STRICTTYPE_VAL(x))
#define mbdft_copy(s,y,x)	mbdft_copy_m((s),STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */


/*****************************************************************************/
/* Here are the definitions for bw_bbdft : bigdim x bigdim - DFTs */
/*****************************************************************************/

typedef mp_limb_t		* 	bw_bbdft_r;
#define bbdft_poly_m(s,x,i,j)	((x)+((EXTFIELD_SIZE)<<(s))*((i)+bigdim*(j)))
#define bbdft_scal_m(s,x,i,j,k)	(bbdft_poly_m((s),(x),(i),(j))+((EXTFIELD_SIZE)*k))
#define bbdft_size(s)		((bigdim*bigdim*EXTFIELD_SIZE)<<(s))
#define bbdft_alloc_m(s,x)	(x = (bw_bbdft_r) mymalloc(bbdft_size((s))*sizeof(mp_limb_t)))
#define bbdft_free_m(s,x)	free(x)
#define bbdft_head_m(s,x)	(x)
#define bbdft_zero_m(s,x)	(void) memset(bbdft_head_m((s),(x)),0,bbdft_size((s))*sizeof(mp_limb_t))
#define bbdft_copy_m(s,y,x)	(void) memcpy((y),(x),bbdft_size((s))*sizeof(mp_limb_t))
STRICTTYPE_DECL(bw_bbdft_r,bw_bbdft);

#ifdef PREFER_INLINES

#ifdef	COMPILER_KNOWS_PRAGMA
#pragma inline(_bbdft_alloc)
#pragma inline(bbdft_free)
#pragma inline(bbdft_poly)
#pragma inline(bbdft_scal)
#pragma inline(bbdft_head)
#pragma inline(bbdft_zero)
#pragma inline(bbdft_copy)
#endif	/* COMPILER_KNOWS_PRAGMA */

#define bbdft_alloc(s, x)	_bbdft_alloc((s), &(x))
FASTFUNC void*			_bbdft_alloc(int, bw_bbdft *);
FASTFUNC void			bbdft_free(int, bw_bbdft);
FASTFUNC mp_limb_t *		bbdft_poly(int, bw_bbdft, int, int);
FASTFUNC mp_limb_t *		bbdft_scal(int, bw_bbdft, int, int, int);
FASTFUNC void *			bbdft_head(int, bw_bbdft);
FASTFUNC void			bbdft_zero(int, bw_bbdft);

#else	/* PREFER_INLINES */

#define bbdft_alloc(s,x)	bbdft_alloc_m((s),STRICTTYPE_VAL(x))
#define bbdft_free(s,x)		bbdft_free_m((s),STRICTTYPE_VAL(x))
#define bbdft_poly(s,x,i,j)	bbdft_poly_m((s),STRICTTYPE_VAL(x),i,j)
#define bbdft_scal(s,x,i,j,k)	bbdft_scal_m((s),STRICTTYPE_VAL(x),i,j,k)
#define bbdft_head(s,x)		bbdft_head_m((s),STRICTTYPE_VAL(x))
#define bbdft_zero(s,x)		bbdft_zero_m((s),STRICTTYPE_VAL(x))
#define bbdft_copy(s,y,x)	bbdft_copy_m((s),STRICTTYPE_VAL(y),STRICTTYPE_VAL(x))

#endif	/* PREFER_INLINES */

#ifdef __cplusplus
}
#endif

#endif	/* STRUCTURE_AUTOMATIC_H_ */

