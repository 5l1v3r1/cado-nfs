
Running lines for lingen:

469      [6,6+]: 2.1/19.1,104.5              [4+]: 13.5/131.2 (10.3%)  

Breakdown of information:

469
    current value of t. The range of t values concerned by this
    subcomputation it [t-dt,t] for some value of dt which is not given.
[6,6+]: 2.1/19.1,104.5
    the current node is at level 6.
    we've spent 2.1 seconds so far at this level.
    we expect to spend 19.1 seconds total at this level.
    we expect to spend 104.5 at this level and children.
[4+]: 13.5/131.2 (10%)
    we base our estimation on progress made at levels 4 and children.
    we've spent 13.5 seconds so far in the total computation.
    we expect the whole computation to take 131.2 seconds.
    we've done 10% of our estimation so far.

    The lower the outermost level (here 4) in this estimation,
    the more precise it is.

Don't be misled by this, for instance:

2131     [2,2+]: 13.4/26.8,175.9             [2+]: 88.0/175.9 (50%)  
2131     [1,1+]: 23.4/46.8,222.7             [1+]: 111.4/222.7 (50%) 


Estimation [2+] was off by a fair bit, because the program had no idea
by that time of how long the computation at level 1 would take. Therefore
it is not accounted for in the first estimation, hence the difference.
The second estimation is more precise. The most precise estimation is 0+,
but it is only computed at the end of the program ;-).

IOW, the percentage is monotonic, but not completely linear.

Tuning the threshold (-t argument) could be done as follows:

- run with a first guess threshold (e.g. 64).
- notice some of the first estimations printed.
- try again with double or half threshold, see what it gets. If, say,
  estimation 5+ increases, then the selection was sub-optimal.
