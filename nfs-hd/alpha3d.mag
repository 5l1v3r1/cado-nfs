// Computing the alpha value for polynomials that are sieved in dimension 3.
//
// This is like the usual alpha, but this takes into account that an
// irreducible factor of degree 2 modulo p in f will change the local value of
// alpha(f) at p, because when we sieve polynomials of degree 2 (i.e. in
// dimension 3), if a polynomial is proportional (mod p) to this factor, this
// yields a power of p in the resultant.
//
// Also, the formulae for single roots are slightly different (we deal with
// the projective space, not projective plane, so we expect some p+1 replaced
// by p^2+p+1 here and there).
//
// For a typical good polynomials selected with the classical alpha, it is
// observed that the real alpha is 20% larger (i.e. the polynomials are
// actually better than what they looked).



////////////////////////////////////////////////////////////
//  FIRST PART = TOOLS FOR INNVESTIGATING THE RIGHT FORMULAE
////////////////////////////////////////////////////////////


// Proba that a poly of degree 2 has rho as an at least single root mod ell^k.
// I.e. number of a*x^2+b*x+c, with ell not dividing all of them and such that
//   a*rho^2+b*rho+c = 0 mod ell^k
// where a, b, c take all values in [0, ell^k-1]
function ProbRootModEllK(rho, ell, k)
    res := 0;
    tot := 0;
    for a := 0 to ell^k-1 do
        for b := 0 to ell^k-1 do
            for c := 0 to ell^k-1 do
                if GCD([a,b,c]) mod ell eq 0 then continue; end if;
                tot +:= 1;
                if (a*rho^2 + b*rho + c) mod ell^k eq 0 then
                    res +:= 1;
                end if;
            end for;
        end for;
    end for;
    assert res eq ell^(2*k) - ell^(2*k-2);
    assert tot eq ell^(3*k) - ell^(3*k-3);
    return res / tot;
end function;


// Contribution in alpha of a single root of f modulo ell.
// Should be multiplied by log(ell) and subtracted from the
// corresponding value for a random integer.
//
// This is Sum(k=1..infinity, ProbRootModEllK(rho, ell, k)), which
// does not depend on rho.
//
// The value is (ell^2+ell) / (ell^3-1).
// It should be compared with ell/(ell^2-1) that we have in the classical
// case.
//  ell (ell^2+ell)/(ell^3-1)   ell/(ell^2-1)
//  2   0.857                   0.666
//  3   0.461                   0.375
//  5   0.242                   0.208
//  7   0.164                   0.146
function ValuationContribSingleRoot(ell)
    return (ell^2+ell) / (ell^3-1);
end function;

function ValuationContribSingleDeg2Factor(ell)
    return 2*ell^2/( (ell^2-1)*(ell^2+ell+1) );
end function;

function AverageValPoly(f, ell, N)
    V := 0;
    x := Parent(f).1;
    B := N^2;
    for i := 1 to N do
        repeat 
            // a := Random(1, B)*x + Random(1,B);
            a := Random(1,B)*x^2+Random(1, B)*x + Random(1,B);
        until IsIrreducible(a) and Content(a) eq 1;
        R := Resultant(f, a);
        V +:= Valuation(R, ell);
    end for;
    return 1.0*V/N;
end function;

function ValuationModpk(f, p, k)
    x := Parent(f).1;
    vals := [];
    for a := 0 to p^k-1 do
        for b := 0 to p^k-1 do
            for c := 0 to p^k-1 do
                if GCD([a,b,c]) mod p eq 0 then continue; end if;
                val := Valuation(Resultant(f, a*x^2+b*x+c), p);
                Append(~vals, <[a,b,c], val>);
            end for;
        end for;
    end for;
    return vals;
end function;

////////////////////////////////////////////////////////////
// Another exprimental zone
// Trying to get a complete algorithm avoiding factoring over
// the p-adic.
////////////////////////////////////////////////////////////


// Given a polynomial f over an unramified p-adic field, compute the roots
// of f in the residue field, and lift them to elements of the original p-adic
// field.
// This is really boring magma-stuff to do just "mod p"...
function Myrootsmodp(f)
    Qq := BaseRing(f);
    Qp := BaseRing(Qq);
    p := Prime(Qp);
    phi := DefiningPolynomial(Qq);
    phip := PolynomialRing(GF(p))![Integers()!x :
                x in Eltseq(DefiningPolynomial(Qq))];
    Fq := ext<GF(p) | phip>;
    coefsf := Coefficients(f);
    C := [];
    for c in coefsf do
        seqc := Fq!PolynomialRing(GF(p))![ Integers()!x : x in Eltseq(c) ];
        Append(~C, seqc);
    end for;
    roo := Roots(PolynomialRing(Fq)!C);
    roo := [ r[1] : r in roo ];
    R := [];
    for r in roo do
        rr := Evaluate(PolynomialRing(Qp)![Qp!Integers()!x : x in Eltseq(r)],
            Qq.1);
        Append(~R, rr);
    end for;
    return R;
end function;

// Hensel.
function aux2(f, p)
    v := Min([Valuation(c) : c in Coefficients(f) ]);
    f /:= p^v;
    df := Derivative(f);
    roo := Myrootsmodp(f);
    for r in roo do
        vr := Valuation(Evaluate(df, r));
        if vr eq 0 then
            v +:= 1/(p^2-1);
        else
            f2 := Evaluate(f, r + p*Parent(f).1);
            v +:= aux2(f2, p) / p^2;
        end if;
    end for;
    return v;
end function;

// Compute the average valuation corresponding to the irred factor phi of
// degree 2 mod p.
// Rem: it can be a multiple factor.
function average_val_deg2(f, phi, p)
    Qp2 := UnramifiedExtension(pAdicField(p, 20), 2);
    f := PolynomialRing(Qp2)!f;
    df := Derivative(f);
    phi := PolynomialRing(Qp2)!phi;
    roo := Myrootsmodp(phi);
    v := 0;
    for r in roo do 
        vr := Valuation(Evaluate(df, r));
        if vr eq 0 then
            v := v + 1/(p^2-1);
        else
            f2 := Evaluate(f, r + p*Parent(f).1);
            v := v + aux2(f2, p) / p^2;
        end if;
    end for;
    return v*p^2/(p^2+p+1);
end function;


function aux_multiple(f, p, k);
    v := Min([Valuation(c, p) : c in Coefficients(f) ]);
    f div:= p^v;
    df := Derivative(f);
    fp := PolynomialRing(GF(p))!f;
    rr := Roots(fp);
    // Once the root stops lifting, we can still lift the factor of
    // degree 2 indefinitely unless it's ramified.
    // The following takes this into account.
    if #rr eq 0 then
        if Degree(fp) eq 0 then
            if k eq 2 then 
                printf "ramified with ram. degree = 2!\n";
                v := v + (p+1)*p^2/(p^2-1);
            else
                printf "ramified with ram. degree > 2!\n";
            end if; 
            return v;
        end if;
        if Degree(fp) eq 2 then 
            printf "unramified of degree = 2\n";
            v := (p+1)*v + 2*p/(p^2-1);
        else
            printf "unramified of degree > 2\n";
        end if;
        return v;
    end if;
    for r in rr do
        ro := Integers()!r[1];
        vr := Valuation(Evaluate(df, ro), p);
        if vr eq 0 then
            assert #rr eq 2;
            v := 2*p*(p+1)/(p-1);
            return v;
        else 
            f2 := Evaluate(f, ro + p*Parent(f).1);
            vv := aux_multiple(f2, p, k);
            v := (p+1)*v + vv/p;
        end if;
    end for;
    return v;
end function;

// Get the average valuation corresponding to the root r of f mod p.
// k is its multiplicity.
// FIXME: for the moment, it does not work if k != 2.
function average_val_multiple_root(f, r, p, k)
    f2 := Evaluate(f, r+p*Parent(f).1);
    v := aux_multiple(f2, p, k);
    return v/(p^2+p+1);
end function;

// This is not in production yet, because it does not handle properly
// multiple roots when the multiplicity is greater than 2.
function my_new_expected_val_p(f, p)
    n1 := 0; // number of single roots mod p
    n2 := 0; // number of deg 2 irred factors mod p
    v := 0;
    ff := Factorization(f, GF(p));
    for fact in ff do
        if Degree(fact[1]) ge 3 then
            continue;
        end if;
        if Degree(fact[1]) eq 2 then
            if fact[2] eq 1 then
                n2 +:= 1;
            else
                v +:= average_val_deg2(f, fact[1], p);
            end if;
            continue;
        end if;
        assert Degree(fact[1]) eq 1;
        if fact[2] eq 1 then
            n1 +:= 1;
        else
            if fact[2] ne 2 then
                error "not yet implemented!";
            end if;
            roo := Integers()!(-Coefficient(fact[1], 0));
            v +:= average_val_multiple_root(f, roo, p, fact[2]);
        end if;
    end for;
    v +:= n1*(p^2+p)/(p^3-1);
    v +:= 2*n2*p^2/( (p^2-1)*(p^2+p+1) );
    return v;
end function;


////////////////////////////////////////////////////////////
//  SECOND PART = EXPORTED STUFF
////////////////////////////////////////////////////////////

function montecarlo_average_val_affine(f, list_p, N)
    V := [ 0.0 : p in list_p ];
    x := Parent(f).1;
    B := N^2;
    for i := 1 to N do
        repeat
            a := Random(1,B)*x^2+Random(1, B)*x + Random(1,B);
        until IsIrreducible(a) and Content(a) eq 1;
        R := Resultant(f, a);
        for j := 1 to #list_p do
            v := Valuation(R, list_p[j]);
            V[j] +:= v;
        end for;
    end for;
    V := [ x/N : x in V];
    return V;
end function;

// Assume p does not divide lc(f) nor disc(f)
function expect_val_p(f, p)
    ff := Factorization(f, GF(p));
    nr1 := #[ r: r in ff | Degree(r[1]) eq 1];
    nr2 := #[ r: r in ff | Degree(r[1]) eq 2];
    val_p := nr1*(p^2+p)/(p^3-1);
    val_p +:= 2*nr2*p^2/( (p^2-1)*(p^2+p+1) );
    return val_p;
end function;


// Main exported function.
function alpha3d(f, pmax)
    p := 2;
    Badp := [];
    alpha := 0.0;
    while p le pmax do
        if LeadingCoefficient(f) mod p eq 0 or Discriminant(f) mod p eq 0 then
            Append(~Badp, p);
        else
            alpha +:= Log(p)*( 1/(p-1) - expect_val_p(f, p) );
        end if;
        p := NextPrime(p);
    end while;

    vals := montecarlo_average_val_affine(f, Badp, 10000);
    for i := 1 to #Badp do
        p := Badp[i];
        alpha +:= Log(p)*( 1/(p-1) - vals[i] );
    end for;
    return alpha;
end function;
