
set (sources 
        cado_poly.c relation.c timing.cpp getprime.c mod_ul.c
        modredc_ul.c modredc_15ul.c modredc_2ul2.c modul_poly.c gmp_aux.c
        double_poly.c rootfinder.c params.c gcd.c
        discriminant.c mpz_array.c gzip.c misc.c
        mpz_poly.c crc.c purgedfile.c bit_vector.c
        barrier.c usp.c fix-endianness.c memusage.c
        cachesize_cpuid.c cachesize_guess.c roots_mod.c mod_mpz.c renumber.c
        ringbuf.c sm_utils.c memalloc.c mpz_vector.c memory.c
)
if (NOT MINGW)
    set (sources ${sources} cado_popen.c)
endif (NOT MINGW)

set (sources_io
        filter_io.cpp
)

############################################################
# Get a list of modified files in the working directory,
# with their SHA1 sums, and write as a string constant to
# modified_files.h

# We need to run list_modified_files.sh inside an add_custom_target(), or it
# won't be PHONY so that it would not be run again if modified_files.h already
# exists
add_custom_target(renew_modified_files
    COMMAND "${CADO_NFS_SOURCE_DIR}/scripts/list_modified_files.sh" "${CMAKE_CURRENT_BINARY_DIR}/modified_files.h"
    WORKING_DIRECTORY "${CADO_NFS_SOURCE_DIR}"
    COMMENT "Generating list of modified files in working tree"
)

# We need to have modified_files.h generated by an add_custom_command(),
# otherwise there seems to be no way of telling CMake that other targets
# should depend on this file, and that they should be considered out-of-
# date if this file has changed
add_custom_command(
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/modified_files.h"
  COMMAND "${CMAKE_COMMAND}" -E echo
  DEPENDS renew_modified_files
)

# The params.c file depends on modified_files.h, so we add this dependency
# as a source-file property
set_source_files_properties(params.c OBJECT_DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/modified_files.h")

# The modified_files.h file lives in the utils/ subdirectory of the build
# tree (the current binary directory) which is not included in the header
# search path by default. Thus we add an -I flag to the compile command
set_source_files_properties(params.c COMPILE_FLAGS "-I ${CMAKE_CURRENT_BINARY_DIR}")


# the utils library is used by some shared objects (prominently the
# matmul shared libs in bwc), and therefore must be shared.
add_library (utils ${CADO_SHARED} ${sources})
target_link_libraries(utils pthread ${gmp_libname} m)

add_library (utils_with_io ${CADO_SHARED} ${sources_io})
target_link_libraries(utils_with_io utils)
add_dependencies(utils_with_io antebuffer)

install(TARGETS utils utils_with_io DESTINATION lib/${package_basename})

add_executable(cut_n_roots cut_n_roots.c)
target_link_libraries(cut_n_roots utils)

add_executable(roots roots.c)
target_link_libraries(roots utils)

add_executable(gmp_prob_prime gmp_prob_prime.c)
add_executable(gmp_nextprime gmp_nextprime.c)
add_executable(random_integer random_integer.c)

# To avoid the warning: implicit declaration of function nanosleep. It's POSIX, non c99.
set (CMAKE_OLD_C_FLAGS "${CMAKE_C_FLAGS}")
set (CMAKE_C_FLAGS "prout -D _POSIX_C_SOURCE=200809L ${CMAKE_C_FLAGS}")
add_executable(antebuffer antebuffer.c timing.cpp memusage.c)
set (CMAKE_C_FLAGS "${CMAKE_OLD_C_FLAGS}")

target_link_libraries(gmp_prob_prime ${gmp_libname})
target_link_libraries(gmp_nextprime ${gmp_libname})
target_link_libraries(random_integer ${gmp_libname})
target_link_libraries(antebuffer pthread)

include(CMakeLists-nodist.txt OPTIONAL)

install(TARGETS gmp_prob_prime random_integer RUNTIME DESTINATION bin/utils)
install(TARGETS cut_n_roots roots gmp_nextprime antebuffer RUNTIME DESTINATION bin/utils)
