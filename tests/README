This tests/ directory contains many tests.

To run them, run "make check" at the top-level cado-nfs directory.
Be aware that "make test" is *not* equivalent: this will skip some
test-specific compilation and might fail, depending on what you did
before.

** Running tests in parallel
----------------------------

Typing
  make -j check 
is not enough: this will use parallelism only during the build process.
In order to get parallelism during the tests themselves, use:
  make check ARGS="-j"
The combination
  make -j check ARGS="-j"
should work and use parallelism at every level.

** Running only one test
------------------------

If only one test is wanted, it is possible to specify it, again within
the ARGS parameter. For instance, to run only the 'test_memusage' check,
use:
  make check ARGS="-R test_memusage"

Note that the argument to -R is a regular expression, so in the example
above, if a test called test_memusage2 exists it gets run too.

** Expensive tests
------------------

Some tests are costly and we do not expect users to run them after each
compilation. They can however be activated by setting the environment
variable CHECKS_EXPENSIVE.
For instance, under bash, run:
  export CHECKS_EXPENSIVE=yes
  make cmake
  make check
The second line is necessary, so that cmake really takes the newly set
environment into account.

** Adding new tests
-------------------

Unitary tests should go in the subdirectory of tests/ corresponding to
the same subdirectory where the function is defined in the source tree.
Then, add a new C-file, with a name like test_myfunction.c, and the main
should exercise myfunction(). If everything is ok, the main should return
EXIT_SUCCESS (and anything else otherwise, from segfault to
EXIT_FAILURE). 
Finally, edit CMakeLists.txt in the same directory, and add a line like
  build_and_run_test(test_myfunction.c utils)
(in case only libutils.a is required).
A few utilitary functions for testing are available in tests/tests_common.

It is also possible to run a shell script or more generally, any
executable. Browse the subdirectories and the CMakeLists.txt to get
examples.
