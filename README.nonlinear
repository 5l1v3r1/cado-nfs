This file explains how to factor a number with two non linear polynomials.
This is currently very experimental in CADO-NFS. In particular the CADO siever
does not support two non linear polynomials, thus we have to use the Franke-
Kleinjung siever.

Assume for example we want to factor the following 59-digit number:

n = 71641520761751435455133616475667090434063332228247871795429

with the two quadratics below (found by Thomas Prest using Montgomery's two
quadratics method):

f = 215609964539787*x^2 + 75006949764904*x + 44337721223995
g = -205964131819700*x^2 - 71651332635517*x + 1199051061668898
skew = 1.29196058385
m = 14849204829709953721577291784724593124898329527333780861554
(m is the common root of f and g mod n.)

In the following, we assume $CADO is the cado-nfs source directory, and
$HOSTNAME is the hostname of your computer.

1) you first have to prepare a polynomial file for the Franke-Kleinjung siever:

$ cat c59
71641520761751435455133616475667090434063332228247871795429
# skew: 1.29196058385
X0 44337721223995
X1 75006949764904
X2 215609964539787
Y0 1199051061668898
Y1 -71651332635517
Y2 -205964131819700
M 14849204829709953721577291784724593124898329527333780861554
0 350000 1.9 24 34
0 350000 1.9 24 34

2) Then create the factor base and sieve:

$ gnfs-lasieve4I12e -b c59 -k -c 0
$ gnfs-lasieve4I12e -b c59 -f 350000 -c 20000 -v -z -S 1.29196058385 -a
...
Total yield: 1739519

3) Then we convert the polynomial and relations to the CADO format:

$ $CADO/misc/convert_poly -if fk -of cado < c59 > c59.poly
$ $CADO/misc/convert_rels -if fk $FILES | gzip --stdout > c59.rels.gz

  where $FILES is the list of all files generated by gnfs-lasieve.

You also may have to check that relations are complete and do not contain
non-prime ideals using:

$ $CADO/misc/complete_rels -out rels.out.gz -poly c59.poly c59.rels.gz

3) Finally you can use cadofactor.py to continue the factorization with CADO.
For more details, see README.msieve (I.3 and I.4)
