######################################################################
# To build with profiling:
# make <target> PFLAGS=-pg

.PHONY: all late_all clean dep messages dclean
BINARY_IN_LOCAL_FAILURE:=$(shell [ -e "$(TOPPATH)/.binary_in_local" ] && [ ! -d "$$HOME/Local/build" ] && echo yes || echo no)
BINARY_IN_LOCAL:=$(shell [ -e "$(TOPPATH)/.binary_in_local" ] && [ -d "$$HOME/Local/build" ] && echo yes || echo no)

# Default values ; only if undefined yet.
CC?=gcc
CXX?=g++
ARQCV?=ar qcv
OFLAGS?=
PFLAGS?=
IFLAGS?=
LFLAGS?=

ifeq ($(STATIC),yes)
LFLAGS+=-static
endif

CFLAGS:=-Wall -ggdb
CXXFLAGS:=-Wall -ggdb
LIBS:=

ifneq ($(GMP),)
IFLAGS+=-I$(GMP)/include
LFLAGS+=-L$(GMP)/lib -Wl,-rpath -Wl,$(GMP)/lib
endif

ifneq ($(MPFR),)
IFLAGS+=-I$(MPFR)/include
LFLAGS+=-L$(MPFR)/lib -Wl,-rpath -Wl,$(MPFR)/lib
endif

# CFLAGS+=-DCFLAGS="\"$(PFLAGS) $(OFLAGS)\""
# CXXFLAGS+=-DCXXFLAGS="\"$(PFLAGS) $(OFLAGS)\""

CFLAGS+=$(PFLAGS) $(OFLAGS) $(IFLAGS)
CXXFLAGS+=$(PFLAGS) $(OFLAGS) $(IFLAGS)

DIST_SUBDIRS:=

all: messages late_all

messages::

ifeq ($(BINARY_IN_LOCAL_FAILURE),yes)
messages::
	@echo "No $$HOME/Local/build directory exists ; building in current directory"
endif

# The BINARY_DIR must be slash-terminated or void
BINARY_DIR:=
ifeq ($(BINARY_IN_LOCAL),yes)
# We prepend the basename of the top directory, so that different project
# don't get similar binaries messed up.
BINARY_DIR:=$(shell $(TOPPATH)/util/translate_path.sh "$$HOME/Local/build" $(TOPPATH)/..)/
endif

# I'm not quite happy with this.
.PHONY: tags
tags:
	ctags --exclude=.git --exclude=.svn -R $(TOPPATH)

CLEAN_PATTERN:=*~ *.bak
DCLEAN_PATTERN:=
BIN_TARGETS:=
LIB_TARGETS:=
ALLDEPS:=

ifeq ($(TOPPATH),)
TOPPATH:=.
endif

# This machinery is very involved.
.%.mkf: $(TOPPATH)/util/sub_mkf_maker.pl
	perl $(TOPPATH)/util/sub_mkf_maker.pl $@

# choose either rules-pch or the lines below
# include rules-pch.mki
.deps/%.c.d: %.c
	@echo "Doing depcheck on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CC) $(CFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*.o' $< > $@
.deps/%.cpp.d: %.cpp
	@echo "Doing depcheck on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CXX) $(CXXFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*.o' $< > $@
#.%.d:   %.c
#	@echo "Doing depcheck on $< --- $*"
#	@$(CC) $(CFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*.o' $< > $@
#.%.d:   %.cpp
#	@echo "Doing depcheck on $< --- $*"
#	@$(CXX) $(CXXFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*.o' $< > $@

#######################################################################
# This really should be improved. The problem is that there's no reason
# why the CFLAGS can't include CPP definitions which will change the
# dependencies...
.deps/%.c-so.d:   %.c
	@echo "Doing depcheck [SO] on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CC) $(MODEL_SO_CFLAGS) $(CFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*-so.o' $< > $@
.deps/%.cpp-so.d:   %.cpp
	@echo "Doing depcheck [SO] on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CXX) $(MODEL_SO_CXXFLAGS) $(CXXFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*-so.o' $< > $@
#######################################################################
.deps/%.c-mt.d:   %.c
	@echo "Doing depcheck [MT] on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CC) $(MODEL_MT_CFLAGS) $(CFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*-mt.o' $< > $@
.deps/%.cpp-mt.d:   %.cpp
	@echo "Doing depcheck [MT] on $<"
	@mkdir -p $$(dirname $@) ; :
	@$(CXX) $(MODEL_MT_CXXFLAGS) $(CXXFLAGS) -M -MM -MG -MT '$@ $(BINARY_DIR)$*-mt.o' $< > $@

#######################################################################
# Compilation rules
#
# plain
$(BINARY_DIR)%.o: %.cpp
	@[ -n "`dirname $@`" ] && mkdir -p "`dirname $@`" ; :
	$(CXX) -c $(CXXFLAGS) $< -o $@

$(BINARY_DIR)%.o: %.c
	@[ -n "`dirname $@`" ] && mkdir -p "`dirname $@`" ; :
	$(CC) -c $(CFLAGS) $< -o $@

# so
MODEL_SO_CFLAGS:=-fPIC
MODEL_SO_CXXFLAGS:=$(MODEL_SO_CFLAGS)

$(BINARY_DIR)%-so.o: %.cpp
	@[ -n "$(BINARY_DIR)" ] && mkdir -p $(BINARY_DIR) ; :
	$(CXX) -c $(MODEL_SO_CXXFLAGS) $(CXXFLAGS) $< -o $@

$(BINARY_DIR)%-so.o: %.c
	@[ -n "$(BINARY_DIR)" ] && mkdir -p $(BINARY_DIR) ; :
	$(CC) -c $(MODEL_SO_CFLAGS) $(CFLAGS) $< -o $@

# mt
MODEL_MT_CFLAGS:=-pthread -D_REENTRANT -DENABLE_PTHREADS
MODEL_MT_CXXFLAGS:=$(MODEL_MT_CFLAGS)
MODEL_MT_LFLAGS:=-pthread
MODEL_MT_LXXFLAGS:=$(MODEL_MT_LFLAGS)

$(BINARY_DIR)%-mt.o: %.cpp
	@[ -n "$(BINARY_DIR)" ] && mkdir -p $(BINARY_DIR) ; :
	$(CXX) -c $(MODEL_MT_CXXFLAGS) $(CXXFLAGS) $< -o $@

$(BINARY_DIR)%-mt.o: %.c
	@[ -n "$(BINARY_DIR)" ] && mkdir -p $(BINARY_DIR) ; :
	$(CC) -c $(MODEL_MT_CFLAGS) $(CFLAGS) $< -o $@

#####################################################################
.cpp.s:
	$(CXX) -S $(CXXFLAGS) $< -o $@

clean: messages
	-@rm -vf $(CLEAN_PATTERN)
	-@rm -vf *.prm
	-@for f in $(DIST_SUBDIRS) ; do $(MAKE) -s -C $$f clean ; done

dclean: clean
	-@rm -vf $(DCLEAN_PATTERN)

variables::
	@echo "BINARY_DIR=$(BINARY_DIR)"


# vim:ft=make
