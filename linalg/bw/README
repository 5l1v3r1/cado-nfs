Block Wiedemann.  
For the impatient, there's a ./doit.pl script which illustrates how the
solver works. It works as follows, for checking random matrices.

./doit.pl msize=10000 dens=100 modulus=31 mn=8 vectoring=2 threshold=128

./doit.pl msize=10000 dens=100 modulus=2 mn=64 vectoring=64 multisols=1

or

./doit.pl matrix=/tmp/my_matrix.txt


The latter forms allows solving of an arbitrary matrix.

The solver looks for a ***COLUMN*** dependency, thus one first has to apply
the linalg/transpose program to the "small" matrix produced by merge. For
example for the c59:

% set tmp=/localdisk/tmp
% ../transpose $tmp/c59.1.0x6x10x100.small $tmp/c59.1.0x6x10x100.small.tr
% ./doit.pl matrix=$tmp/c59.1.0x6x10x100.small.tr

Two matrix formats are recognized.
Either the matrix file has to start with a magic comment like:
// 12345 ROWS 12345 COLUMNS MODULUS 41
or with a single header line:
12345 12345
(nrows, ncolumns), meaning that we're working over the binary field.

Then rows indicate the number of non-zero coeffs, plus the indices of the
zero coeffs (append :42 if the coeff equals 42 and not 1).


In order to obtain several column dependencies on a binary matrix /tmp/mat, one
would do:

./doit.pl matrix=/tmp/mat mn=64 vectoring=64 tidy=0 multisols=1 threshold=9999999

(the 9999999 is here to provide a working fallback for the time being, as
there's a bug disturbing me).

Some data on the options (defaults in brackets)


msize=, dens=	set the characteristics for an example matrix
modulus=	guess...
mn=, m=, n=	set the m and n parameters for block wiedemann (mn sets both)
vectoring=k	process k vectors y at a time. There must be code capable
		of handling this, cf for instance sse2_2words_traits.hpp
method=		selection of the FFT method for the fast linear generator
		computation
dump=1		only relevant for small tests -- dump magma code for debugging.
		default: 0, do not dump.
dumpcfg=1	prints what should go in a test file. Useful for
		producing regression tests in tests/
		default: 0, do not print
multisols=1	produces all solutions instead of only one.
		default: 0, only one solution
threshold=xxx	threshold for the fast lingen algorithm (mandatory when
		relevant). 128 is a good hint.
resume=1	try to resume from an interrupted computation
		default: 0, do not try to resume
wdir=		working directory ($ENV{HOME}/Local/testmat by default)
seed=xxx	select random seed
precond=	input preconditioner (look forward to rhs= option, someday)
mt=n		select multithreaded code, using n threads
		default: 0, not multithreaded.
machines=	set of slave machines
rsync=1		push working dir to machines with rsync (alternatively,
		one can use an NFS shared dir)
		default: 0, assume an NFS shared dir is used.
tidy=0		do not remove the working directory once the computation
		is finished
		default: 1, do remove the directory.



