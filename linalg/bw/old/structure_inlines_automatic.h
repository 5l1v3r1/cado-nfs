
/* Copyright (C) 1999--2006 Emmanuel Thome */

/* This file was generated by m4 on Mon Apr 30 15:02:04 CEST 2007 */
/* Do not edit this file. Re-generate instead from the source (using m4) */

#ifndef INCLUDING_STRUCTURE_INLINES_AUTOMATIC_H_
#error "Do not include this file directly\n"
#endif

#ifndef STRUCTURE_INLINES_AUTOMATIC_H_
#define STRUCTURE_INLINES_AUTOMATIC_H_

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************/
/* Here are the implementations for bw_mnmat : m_param x n_param matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _mnmat_alloc(bw_mnmat * px)
{
	return mnmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	mnmat_free(bw_mnmat x)
{
	mnmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t mnmat_pos(bw_mnmat x, int i, int j, int k)
{
	return mnmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * mnmat_scal(bw_mnmat x, int i, int j)
{
	return mnmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * mnmat_head(bw_mnmat x)
{
	return mnmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void mnmat_zero(bw_mnmat x)
{
	mnmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void mnmat_copy(bw_mnmat y, bw_mnmat x)
{
	mnmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



/*****************************************************************************/
/* Here are the implementations for bw_nbmat : n_param x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _nbmat_alloc(bw_nbmat * px)
{
	return nbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	nbmat_free(bw_nbmat x)
{
	nbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t nbmat_pos(bw_nbmat x, int i, int j, int k)
{
	return nbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * nbmat_scal(bw_nbmat x, int i, int j)
{
	return nbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * nbmat_head(bw_nbmat x)
{
	return nbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void nbmat_zero(bw_nbmat x)
{
	nbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void nbmat_copy(bw_nbmat y, bw_nbmat x)
{
	nbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_ncol nbmat_col(bw_nbmat x, int j)
{
	return STRICTTYPE_CAST(bw_ncol,nbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void ncol_copy(bw_ncol y, bw_ncol x)
{
	ncol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void ncol_zero(bw_ncol x)
{
	ncol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar ncol_scal(bw_ncol c, int i)
{
	return ncol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _ncol_alloc(bw_ncol *c)
{
	return ncol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void ncol_free(bw_ncol c)
{
	ncol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int ncol_is_zero(bw_ncol c)
{
	int i;
	for(i=0;i<n_param;i++) {
		if (!bw_scalar_is_zero(ncol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_mbmat : m_param x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _mbmat_alloc(bw_mbmat * px)
{
	return mbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	mbmat_free(bw_mbmat x)
{
	mbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t mbmat_pos(bw_mbmat x, int i, int j, int k)
{
	return mbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * mbmat_scal(bw_mbmat x, int i, int j)
{
	return mbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * mbmat_head(bw_mbmat x)
{
	return mbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void mbmat_zero(bw_mbmat x)
{
	mbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void mbmat_copy(bw_mbmat y, bw_mbmat x)
{
	mbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_mcol mbmat_col(bw_mbmat x, int j)
{
	return STRICTTYPE_CAST(bw_mcol,mbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void mcol_copy(bw_mcol y, bw_mcol x)
{
	mcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void mcol_zero(bw_mcol x)
{
	mcol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar mcol_scal(bw_mcol c, int i)
{
	return mcol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _mcol_alloc(bw_mcol *c)
{
	return mcol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void mcol_free(bw_mcol c)
{
	mcol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int mcol_is_zero(bw_mcol c)
{
	int i;
	for(i=0;i<m_param;i++) {
		if (!bw_scalar_is_zero(mcol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_bbmat : bigdim x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _bbmat_alloc(bw_bbmat * px)
{
	return bbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	bbmat_free(bw_bbmat x)
{
	bbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t bbmat_pos(bw_bbmat x, int i, int j, int k)
{
	return bbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * bbmat_scal(bw_bbmat x, int i, int j)
{
	return bbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * bbmat_head(bw_bbmat x)
{
	return bbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void bbmat_zero(bw_bbmat x)
{
	bbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void bbmat_copy(bw_bbmat y, bw_bbmat x)
{
	bbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_bcol bbmat_col(bw_bbmat x, int j)
{
	return STRICTTYPE_CAST(bw_bcol,bbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void bcol_copy(bw_bcol y, bw_bcol x)
{
	bcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void bcol_zero(bw_bcol x)
{
	bcol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar bcol_scal(bw_bcol c, int i)
{
	return bcol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _bcol_alloc(bw_bcol *c)
{
	return bcol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void bcol_free(bw_bcol c)
{
	bcol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int bcol_is_zero(bw_bcol c)
{
	int i;
	for(i=0;i<bigdim;i++) {
		if (!bw_scalar_is_zero(bcol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_mnpoly : bw_mnmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_mnmat mnpoly_coeff(bw_mnpoly x, int t)
{
	return STRICTTYPE_CAST(bw_mnmat,mnpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_mnpoly mnpoly_subpoly(bw_mnpoly x, int t)
{
	return STRICTTYPE_CAST(bw_mnpoly,mnpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _mnpoly_alloc(bw_mnpoly * px, int d)
{
	return mnpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void mnpoly_zero(bw_mnpoly x, int t)
{
	mnpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void mnpoly_free(bw_mnpoly x)
{
	mnpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_nbpoly : bw_nbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_nbmat nbpoly_coeff(bw_nbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_nbmat,nbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_nbpoly nbpoly_subpoly(bw_nbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_nbpoly,nbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _nbpoly_alloc(bw_nbpoly * px, int d)
{
	return nbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void nbpoly_zero(bw_nbpoly x, int t)
{
	nbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void nbpoly_free(bw_nbpoly x)
{
	nbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_mbpoly : bw_mbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_mbmat mbpoly_coeff(bw_mbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_mbmat,mbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_mbpoly mbpoly_subpoly(bw_mbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_mbpoly,mbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _mbpoly_alloc(bw_mbpoly * px, int d)
{
	return mbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void mbpoly_zero(bw_mbpoly x, int t)
{
	mbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void mbpoly_free(bw_mbpoly x)
{
	mbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_bbpoly : bw_bbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_bbmat bbpoly_coeff(bw_bbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_bbmat,bbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_bbpoly bbpoly_subpoly(bw_bbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_bbpoly,bbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _bbpoly_alloc(bw_bbpoly * px, int d)
{
	return bbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void bbpoly_zero(bw_bbpoly x, int t)
{
	bbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void bbpoly_free(bw_bbpoly x)
{
	bbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */

#ifndef EXTFIELD_SIZE
#ifdef HAS_NATIVE_FFT
#define EXTFIELD_SIZE	bw_allocsize
#else	/* HAS_NATIVE_FFT */
#define EXTFIELD_SIZE   (bw_allocsize<<1)
#endif	/* HAS_NATIVE_FFT */
#endif

/*****************************************************************************/
/* Here are the implementations for bw_x_mnmat : m_param x n_param matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _x_mnmat_alloc(bw_x_mnmat * px)
{
	return x_mnmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	x_mnmat_free(bw_x_mnmat x)
{
	x_mnmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t x_mnmat_pos(bw_x_mnmat x, int i, int j, int k)
{
	return x_mnmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * x_mnmat_scal(bw_x_mnmat x, int i, int j)
{
	return x_mnmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * x_mnmat_head(bw_x_mnmat x)
{
	return x_mnmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_mnmat_zero(bw_x_mnmat x)
{
	x_mnmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_mnmat_copy(bw_x_mnmat y, bw_x_mnmat x)
{
	x_mnmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



/*****************************************************************************/
/* Here are the implementations for bw_x_nbmat : n_param x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _x_nbmat_alloc(bw_x_nbmat * px)
{
	return x_nbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	x_nbmat_free(bw_x_nbmat x)
{
	x_nbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t x_nbmat_pos(bw_x_nbmat x, int i, int j, int k)
{
	return x_nbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * x_nbmat_scal(bw_x_nbmat x, int i, int j)
{
	return x_nbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * x_nbmat_head(bw_x_nbmat x)
{
	return x_nbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_nbmat_zero(bw_x_nbmat x)
{
	x_nbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_nbmat_copy(bw_x_nbmat y, bw_x_nbmat x)
{
	x_nbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_ncol x_nbmat_col(bw_x_nbmat x, int j)
{
	return STRICTTYPE_CAST(bw_x_ncol,x_nbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void x_ncol_copy(bw_x_ncol y, bw_x_ncol x)
{
	x_ncol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void x_ncol_zero(bw_x_ncol x)
{
	x_ncol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar x_ncol_scal(bw_x_ncol c, int i)
{
	return x_ncol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _x_ncol_alloc(bw_x_ncol *c)
{
	return x_ncol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void x_ncol_free(bw_x_ncol c)
{
	x_ncol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int x_ncol_is_zero(bw_x_ncol c)
{
	int i;
	for(i=0;i<n_param;i++) {
		if (!bw_scalar_is_zero(x_ncol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_mbmat : m_param x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _x_mbmat_alloc(bw_x_mbmat * px)
{
	return x_mbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	x_mbmat_free(bw_x_mbmat x)
{
	x_mbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t x_mbmat_pos(bw_x_mbmat x, int i, int j, int k)
{
	return x_mbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * x_mbmat_scal(bw_x_mbmat x, int i, int j)
{
	return x_mbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * x_mbmat_head(bw_x_mbmat x)
{
	return x_mbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_mbmat_zero(bw_x_mbmat x)
{
	x_mbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_mbmat_copy(bw_x_mbmat y, bw_x_mbmat x)
{
	x_mbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_mcol x_mbmat_col(bw_x_mbmat x, int j)
{
	return STRICTTYPE_CAST(bw_x_mcol,x_mbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void x_mcol_copy(bw_x_mcol y, bw_x_mcol x)
{
	x_mcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void x_mcol_zero(bw_x_mcol x)
{
	x_mcol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar x_mcol_scal(bw_x_mcol c, int i)
{
	return x_mcol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _x_mcol_alloc(bw_x_mcol *c)
{
	return x_mcol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void x_mcol_free(bw_x_mcol c)
{
	x_mcol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int x_mcol_is_zero(bw_x_mcol c)
{
	int i;
	for(i=0;i<m_param;i++) {
		if (!bw_scalar_is_zero(x_mcol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_bbmat : bigdim x bigdim matrices */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _x_bbmat_alloc(bw_x_bbmat * px)
{
	return x_bbmat_alloc_m(STRICTTYPE_VAL(*px));
}
FASTFUNC void	x_bbmat_free(bw_x_bbmat x)
{
	x_bbmat_free_m(STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t x_bbmat_pos(bw_x_bbmat x, int i, int j, int k)
{
	return x_bbmat_pos_m(STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC mp_limb_t * x_bbmat_scal(bw_x_bbmat x, int i, int j)
{
	return x_bbmat_scal_m(STRICTTYPE_VAL(x),i,j);
}
FASTFUNC void * x_bbmat_head(bw_x_bbmat x)
{
	return x_bbmat_head_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_bbmat_zero(bw_x_bbmat x)
{
	x_bbmat_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC void x_bbmat_copy(bw_x_bbmat y, bw_x_bbmat x)
{
	x_bbmat_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */



#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_bcol x_bbmat_col(bw_x_bbmat x, int j)
{
	return STRICTTYPE_CAST(bw_x_bcol,x_bbmat_col_m(STRICTTYPE_VAL(x),j));
}
FASTFUNC void x_bcol_copy(bw_x_bcol y, bw_x_bcol x)
{
	x_bcol_copy_m(STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}
FASTFUNC void x_bcol_zero(bw_x_bcol x)
{
	x_bcol_zero_m(STRICTTYPE_VAL(x));
}
FASTFUNC bw_scalar x_bcol_scal(bw_x_bcol c, int i)
{
	return x_bcol_scal_m(STRICTTYPE_VAL(c),i);
}
FASTFUNC void * _x_bcol_alloc(bw_x_bcol *c)
{
	return x_bcol_alloc_m(STRICTTYPE_VAL(*c));
}
FASTFUNC void x_bcol_free(bw_x_bcol c)
{
	x_bcol_free_m(STRICTTYPE_VAL(c));
}

#endif	/* IMPLEMENT_INLINES */

#if defined(IMPLEMENT_FUNCS) || !defined(PREFER_INLINES)

FASTFUNC int x_bcol_is_zero(bw_x_bcol c)
{
	int i;
	for(i=0;i<bigdim;i++) {
		if (!bw_scalar_is_zero(x_bcol_scal(c,i))) {
			return 0;
		}
	}
	return 1;
}

#endif	/* IMPLEMENT_FUNCS || !PREFER_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_mnpoly : bw_x_mnmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_mnmat x_mnpoly_coeff(bw_x_mnpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_mnmat,x_mnpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_x_mnpoly x_mnpoly_subpoly(bw_x_mnpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_mnpoly,x_mnpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _x_mnpoly_alloc(bw_x_mnpoly * px, int d)
{
	return x_mnpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void x_mnpoly_zero(bw_x_mnpoly x, int t)
{
	x_mnpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void x_mnpoly_free(bw_x_mnpoly x)
{
	x_mnpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_nbpoly : bw_x_nbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_nbmat x_nbpoly_coeff(bw_x_nbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_nbmat,x_nbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_x_nbpoly x_nbpoly_subpoly(bw_x_nbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_nbpoly,x_nbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _x_nbpoly_alloc(bw_x_nbpoly * px, int d)
{
	return x_nbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void x_nbpoly_zero(bw_x_nbpoly x, int t)
{
	x_nbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void x_nbpoly_free(bw_x_nbpoly x)
{
	x_nbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_mbpoly : bw_x_mbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_mbmat x_mbpoly_coeff(bw_x_mbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_mbmat,x_mbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_x_mbpoly x_mbpoly_subpoly(bw_x_mbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_mbpoly,x_mbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _x_mbpoly_alloc(bw_x_mbpoly * px, int d)
{
	return x_mbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void x_mbpoly_zero(bw_x_mbpoly x, int t)
{
	x_mbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void x_mbpoly_free(bw_x_mbpoly x)
{
	x_mbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_x_bbpoly : bw_x_bbmat - polynomials */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC bw_x_bbmat x_bbpoly_coeff(bw_x_bbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_bbmat,x_bbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC bw_x_bbpoly x_bbpoly_subpoly(bw_x_bbpoly x, int t)
{
	return STRICTTYPE_CAST(bw_x_bbpoly,x_bbpoly_coeff_m(STRICTTYPE_VAL(x),t));
}
FASTFUNC void * _x_bbpoly_alloc(bw_x_bbpoly * px, int d)
{
	return x_bbpoly_alloc_m(STRICTTYPE_VAL(*px),d);
}
FASTFUNC void x_bbpoly_zero(bw_x_bbpoly x, int t)
{
	x_bbpoly_zero_m(STRICTTYPE_VAL(x),t);
}
FASTFUNC void x_bbpoly_free(bw_x_bbpoly x)
{
	x_bbpoly_free_m(STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_mndft : m_param x n_param - DFTs */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _mndft_alloc(int s,bw_mndft * px)
{
	return mndft_alloc_m(s,STRICTTYPE_VAL(*px));
}
FASTFUNC void	mndft_free(int s,bw_mndft x)
{
	mndft_free_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t * mndft_poly(int s,bw_mndft x, int i, int j)
{
	return mndft_poly_m(s,STRICTTYPE_VAL(x),i,j);
}
FASTFUNC mp_limb_t * mndft_scal(int s,bw_mndft x, int i, int j, int k)
{
	return mndft_scal_m(s,STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC void * mndft_head(int s,bw_mndft x)
{
	return mndft_head_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void mndft_zero(int s,bw_mndft x)
{
	mndft_zero_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void mndft_copy(int s,bw_mndft y, bw_mndft x)
{
	mndft_copy_m(s,STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_nbdft : n_param x bigdim - DFTs */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _nbdft_alloc(int s,bw_nbdft * px)
{
	return nbdft_alloc_m(s,STRICTTYPE_VAL(*px));
}
FASTFUNC void	nbdft_free(int s,bw_nbdft x)
{
	nbdft_free_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t * nbdft_poly(int s,bw_nbdft x, int i, int j)
{
	return nbdft_poly_m(s,STRICTTYPE_VAL(x),i,j);
}
FASTFUNC mp_limb_t * nbdft_scal(int s,bw_nbdft x, int i, int j, int k)
{
	return nbdft_scal_m(s,STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC void * nbdft_head(int s,bw_nbdft x)
{
	return nbdft_head_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void nbdft_zero(int s,bw_nbdft x)
{
	nbdft_zero_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void nbdft_copy(int s,bw_nbdft y, bw_nbdft x)
{
	nbdft_copy_m(s,STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_mbdft : m_param x bigdim - DFTs */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _mbdft_alloc(int s,bw_mbdft * px)
{
	return mbdft_alloc_m(s,STRICTTYPE_VAL(*px));
}
FASTFUNC void	mbdft_free(int s,bw_mbdft x)
{
	mbdft_free_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t * mbdft_poly(int s,bw_mbdft x, int i, int j)
{
	return mbdft_poly_m(s,STRICTTYPE_VAL(x),i,j);
}
FASTFUNC mp_limb_t * mbdft_scal(int s,bw_mbdft x, int i, int j, int k)
{
	return mbdft_scal_m(s,STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC void * mbdft_head(int s,bw_mbdft x)
{
	return mbdft_head_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void mbdft_zero(int s,bw_mbdft x)
{
	mbdft_zero_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void mbdft_copy(int s,bw_mbdft y, bw_mbdft x)
{
	mbdft_copy_m(s,STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */


/*****************************************************************************/
/* Here are the implementations for bw_bbdft : bigdim x bigdim - DFTs */
/*****************************************************************************/

#ifdef IMPLEMENT_INLINES

FASTFUNC void* _bbdft_alloc(int s,bw_bbdft * px)
{
	return bbdft_alloc_m(s,STRICTTYPE_VAL(*px));
}
FASTFUNC void	bbdft_free(int s,bw_bbdft x)
{
	bbdft_free_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC mp_limb_t * bbdft_poly(int s,bw_bbdft x, int i, int j)
{
	return bbdft_poly_m(s,STRICTTYPE_VAL(x),i,j);
}
FASTFUNC mp_limb_t * bbdft_scal(int s,bw_bbdft x, int i, int j, int k)
{
	return bbdft_scal_m(s,STRICTTYPE_VAL(x),i,j,k);
}
FASTFUNC void * bbdft_head(int s,bw_bbdft x)
{
	return bbdft_head_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void bbdft_zero(int s,bw_bbdft x)
{
	bbdft_zero_m(s,STRICTTYPE_VAL(x));
}
FASTFUNC void bbdft_copy(int s,bw_bbdft y, bw_bbdft x)
{
	bbdft_copy_m(s,STRICTTYPE_VAL(y),STRICTTYPE_VAL(x));
}

#endif	/* IMPLEMENT_INLINES */

#ifdef __cplusplus
}
#endif

#endif	/* STRUCTURE_INLINES_AUTOMATIC_H_ */
