# Parameters form a tree structure. 
# A parameter of the form
# foo.bar.baz = 42
# is said to have path foo.bar, key baz, and value 42.

# Objects of the Python scripts that take parameters from the parameter file 
# have a path associated with them; for example, the Sieving task uses path
# tasks.sieving, and the las siever run in the Sieving task uses
# tasks.sieving.las. When looking for a parameter, we start at the object's 
# path, then work towards to root of the tree until the key is found.

Some variable substitution occurs in the values specified in a parameter file:
A string of the form "${FOO}" is substituted by the value of the shell
environment variable $FOO.
A string of the form "$(foo)" is substituted by the value of the parameter
with key "foo", where the search starts at the path where "$(foo)" occurred.


# name: The name of the factorization project. Will be used as part of file
# names, among other things, so probably should be alphanumeric (TODO: try
# with weirdo German and French characters)
# Everything needs to know the name of the factorization, so this should be
# specified at the root of the parameter tree.

name = testrun


# N: The number to be factored

N = 90377629292003121684002147101760858109247336549001090677693


# Adjust sourcedir to point to the root of your CADO source directory. 
# This parameter is not actually used by cadofactor directly, but it is 
# referenced # as $(sourcedir) further down in the parameter file.

sourcedir=${HOME}/git/cado-nfs


# Adjust builddir to point to the root of your CADO build directory
# Not used directly, either.

builddir=${HOME}/build/cado-nfs/normal


# Parameters for the various tasks performed during the factorization

# workdir: the path of the working directory; if a relative path is
# specified, it is relative to the CWD from which cadofactor is run.
# All the output files of sieving, filtering, etc., are stored under the
# working directory.
# In principle it is possible to specify a different working directory for
# each tasks, which may be benefitial to use disk space across several file
# systems, or to let filtering tasks read from one hard drive while writing
# to another, improving throughput. TODO: test that this actually works

tasks.workdir = /tmp/work/


# execpath: Specify the search path for binary programs that should be run.
# Each binary program that is run can be specified with execpath,
# execsubdir, and execbin parameters; the script looks for the binary
# executable in execpath/execsubdir/execbin and execpath/execbin, in this
# order. Defaults for these parameters are defined for each program in
# cadoprograms.py.
# The Program instances use path, e.g., "tasks.sieving.las", or
# "tasks.filter.merge.merge", but of course can find their parameter from 
# further up the parameter tree, such as "tasks".

tasks.execpath=$(builddir)


# verbose: Verbosity of program output. Many programs accept a -v (or
# similar) command line flag; this parameter specified whether verbose
# output should be enabled. Has no effect on cadofactor itself, just on the
# sub-programs.

tasks.verbose = 1

# rlim, lpbr, mfbr, rlambda, alim, lpba, mfba, alambda: The sieving
# parameters. Also used by several other Tasks and Programs, so best
# specified at path "tasks" where everything can find them.

tasks.rlim=50000
tasks.alim=100000
tasks.lpbr=22
tasks.lpba=22
tasks.mfbr=22
tasks.mfba=22
tasks.rlambda=1.2
tasks.alambda=1.2


# threads: number of threads to use in sub-programs.
# For programs that support multi-threading (e.g., polynomial selection,
# sieving, linear algebra), this specifies the number of threads to use.

tasks.threads=2


# An example of overriding the tasks.verbose=1 for the polyselect task
tasks.polyselect.verbose = 0

# P, degree, admin, admax, adrange: Parameters for the polynomial search
tasks.polyselect.P = 420
tasks.polyselect.degree = 4
tasks.polyselect.admin = 0
tasks.polyselect.admax = 10000
tasks.polyselect.adrange = 5000

#tasks.sieve.rels_wanted = 50000
tasks.sieve.rels_wanted = 122540
tasks.sieve.qrange = 2000
tasks.sieve.I = 11
tasks.filter.nslices_log=1
tasks.filter.keep = 160
tasks.filter.skip = 32
tasks.filter.forbw = 3
tasks.filter.coverNmax  = 100
tasks.filter.maxlevel = 15
tasks.filter.ratio = 1.1
tasks.linalg.mn = 64
tasks.linalg.verbose = 0
tasks.linalg.nchar = 64


# address: The server of the client/server set-up will listen at this
# address. Note that listening on address "localhost" will allow only
# clients running on the same machine to connect. If not specified, the
# computer's hostname will be used.

server.address = localhost


# port: The server of the client/server set-up will listen at this
# port

server.port = 8012


# Clients which cadofactor should start are specified under "slaves".
# It looks for any path under "slaves" with a "hostnames" key, then for each host
# names specified (comma separated list, with multiplicity), one slave is
# launched on that host.
# If the hostname is of the form "@filename", then the host names are read
# from the file "filename", one host name per line.

slaves.caramel.hostnames = localhost


# Modifies the behaviour of the hostnames list: if nrclients in specified,
# then multiplicity in the hostnames list is ignored, and "nrclients" client
# scripts are launched on each unique host name.

slaves.caramel.nrclients = 2


# scriptpath: The path to the wuclient2.py scripts, on the slave's file
# system.

slaves.caramel.scriptpath = $(sourcedir)/scripts/cadofactor


# downloadretry: Number of seconds a client should wait between failed
# download attempts from the server

slaves.caramel.downloadretry = 10
