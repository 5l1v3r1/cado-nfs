1) convert a polynomial from CADO format to Franke-Kleinjung format:

% $CADO/misc/convert_poly -if cado -of fk < rsa100.poly > rsa100

2) convert relations from CADO format to Franke-Kleinjung format
(warning you have to specify the degree of the algebraic polynomial):

% $CADO/misc/convert_rels -if cado -of fk -deg 5 rsa100.rels > part1

3) use msieve linear algebra with relations in CADO format:

   a) create a file msieve.fb, which contains:

      N <number to be factored>
      R0  <coeff of x^0, rational side>
      R1  <coeff of x^1, rational side>
      A0  <coeff of x^0, algebraic side>
      A1  <etc>
      A2  <etc>
      A3  <etc>
      A4  <etc>
      A5  <etc>

      This can be done with:

      $ ./convert_poly -of msieve < cxxx.poly > msieve.fb

   b) create a file msieve.dat, which contains:

      N <number to be factored>
      <all the relations in GGNFS/CADO format>

      (Do not include free relations, since the CADO-NFS format is not
       recognized by msieve, and msieve includes them in the filtering.)

   c) then run "msieve -nc -v <number to be factored>"
      The msieve output goes into msieve.log.
      You can add the "-t 4" option to use 4 threads.   

4) do filtering with CADO with relations in GGNFS format :
    a) get the valid lines with get_valid_lines script in misc (this will remove
    the free relations, if necessary, of the form a,0:)

    b) generate the factor base and the free relations
        $CADO/sieve/makefb -poly rsa100.poly > rsa100.fb
        $CADO/sieve/freerel -poly rsa100.poly -fb rsa100.fb

    c) If necessary use dup to remove duplicates
        $CADO/filter/dup1 -n 1 -out nodup1 -filelist rsa100.filelist -basepath /base/path
        $CADO/filter/dup2 -K K -out nodup/0 -filelist rsa100.filelist -basepath
        /base/path/nodup1/0
        $CADO/filter/dup2 -K K -out nodup/1 -filelist rsa100.filelist -basepath
        /base/path/nodup1/1

            K is the size of the hash table.
            filelist contains the list of all relation files (one per line)

    d) Filtering is done by 3 command: purge, merge and replay.
        $CADO/filter/purge -poly rsa100.poly -keep 160 -nrels nrels -out         /base/path/purged/rels.purged -basepath /base/path -subdirlist rsa100.subdirlist -filelist rsa100.filelist 

            subdirlist contains the list of subdirectories that contains the
            relations. In this example it should be nodup/0 and nodup/1 (one on
            each line)

        $CADO/filter/merge -out rsa100.merge.his -mat purged/rels.purged -forbw 3 -coverNmax MAX -keep 160 -maxlevel LEVEL
        $CADO/filter/replay --noindex --binary -purged purged/rels.purged -his rsa100.merge.his -out matrix/rsa100 

            MAX is the maximum density wanted for the matrix.

