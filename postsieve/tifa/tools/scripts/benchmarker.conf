#------------------------------------------------------------------------------
# Configuration file for the benchmarker.pl script from the TIFA library v0.2
#------------------------------------------------------------------------------
#
# Type "benchmarker.pl --help" for more information on the benchmarker.pl
# script. Type "man Tifa::SimpleConfigReader" for more information on the
# configuration file format used.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Name(s) of the (factoring) program(s) to bench.
#
# Syntax: exe = <path_to_program_name>
#     or: exe = list(<path_to_program_1>, <path_to_program_2>, ... )
#
# The standard program names must be used, i.e. values must be of the form:
#     <path_to_exe>/<std_program_name>
# with <std_program_name> being one of the following:
#     cfrac_factors
#     qs_factors
#     siqs_factors
#     squfof_factors
#------------------------------------------------------------------------------
exe = list(./squfof_factors, ./cfrac_factors)

#------------------------------------------------------------------------------
# Mode(s) of program(s) to bench.
#
# CFRAC only:
#     Set mode to use_defaults to set the CFRAC mode to "use_defaults" i.e. let
#     the CFRAC C program choose the "best" parameters. If mode is set to
#     no_defaults then the CFRAC parameters given in this file are used.
#
# Syntax: mode = <mode>
#     or: mode = list(<mode_1>, <mode_2>, ...)
#------------------------------------------------------------------------------
mode = no_defaults

#------------------------------------------------------------------------------
# Length (in bits) of the number n to factor.
#
# Used only if no argument file is provided on the command line via the
# --args option.
#
# Syntax:
#   bit_length_of_n = list(<val1>, <val2>, <val3> etc.)
# or:
#   bit_length_of_n = range(from <from> to <to> increment <step>)
#
#------------------------------------------------------------------------------
bit_length_of_n = range(from 60 to 100 increment 1)

#------------------------------------------------------------------------------
# Number of prime factors in the decomposition of n
#
# Used only if no argument file is provided on the command line via the
# --args option.
#
# Syntax:
#   nprime_factors_in_n = <number>
# or:
#   nprime_factors_in_n = list(<val1>, <val2>, <val3> etc.)
# or:
#   nprime_factors_in_n = range(from <from> to <to> increment <step>)
#
# Of course, all values given should be different from 1
#------------------------------------------------------------------------------
nprime_factors_in_n = list(2)

#------------------------------------------------------------------------------
# Number of primes used in trial division of the number to factor.
#
# Syntax:
#   nprimes_tdiv = <number>
# or:
#   nprimes_tdiv = list(<val1>, <val2>, <val3> etc.)
# or:
#   nprimes_tdiv = range(from <from> to <to> increment <step>)
#------------------------------------------------------------------------------
nprimes_tdiv = list(1)

#------------------------------------------------------------------------------
# Impose a condition on the set of parameters. A run will be performed only if
# this expression evaluates to non zero.
#
# Syntax:
#   filter = <expression>
#
# In addition to parameters relevant to the program to benchmark, the following
# parameters can be used in the expression:
#   exe
#	algo
#	mode
#
# Expressions should follow Perl's syntax.
#
# Example:
#   filter = (nprimes_in_factor_base == nprimes_tdiv_smooth_nb)
#------------------------------------------------------------------------------
filter =                                                          \
    if (algo eq 'squfof') {                                       \
        # No special requirement for SQUFOF                       \
        1;                                                        \
    } else {                                                      \
        if (!(algo eq 'cfrac') || !(mode eq 'use_defaults')) {    \
            (nprimes_in_factor_base == nprimes_tdiv_smooth_nb);   \
        } else {                                                  \
            1;                                                    \
        }                                                         \
    }

#------------------------------------------------------------------------------
# Parameters for the CFRAC/QS/SIQS algorithms
#------------------------------------------------------------------------------
#
# Number of primes in factor base
#
# Syntax:
#   nprimes_in_factor_base = <number>
# or:
#   nprimes_in_factor_base = list(<val1>, <val2>, <val3> etc.)
# or:
#   nprimes_in_factor_base = range(from <from> to <to> increment <step>
#
nprimes_in_factor_base = list(128, 256, 512, 1024, 2048)

#
# SIQS ONLY: Half width of the sieving interval.
#
# Syntax:
#   sieve_half_width = <number>
# or:
#   sieve_half_width = list(<val1>, <val2>, <val3> etc.)
# or:
#   sieve_half_width = range(from <from> to <to> increment <step>
#
sieve_half_width = range(from 100000 to 600000 increment 200000)

#
# Number of primes to trial divide by the smooth residues
#
# Syntax:
#   nprimes_tdiv_smooth_nb = <number>
# or:
#   nprimes_tdiv_smooth_nb = list(<val1>, <val2>, <val3> etc.)
# or:
#   nprimes_tdiv_smooth_nb = range(from <from> to <to> increment <step>)
#
#
nprimes_tdiv_smooth_nb = list(128, 256, 512, 1024, 2048)

#
# Maximal number of relations wanted
#
# Syntax:
#   nb_relation = <number>
#
nrelations = 32

#
# Method used for the linear system resolution
#
# Syntax:
#   lsr_method = <number>
# or:
#   lsr_method = list(<val1>, <val2>, <val3> etc.)
#
# Note: There is currently only one method supported (lsr_method = 0)
#
lsr_method = 0

#
# Are we using the large prime variation?
#
# Syntax:
#   use_large_primes = 0
# or:
#   use_large_primes = 1
#
use_large_primes = 1
