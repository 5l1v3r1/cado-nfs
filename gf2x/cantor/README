Cantor's multiplication algorithm for GF(2)[x].
===============================================

Authors: Richard Brent, Pierrick Gaudry, Emmanuel Thomé, Paul Zimmermann.
Licence: GNU General Public License (version 2 or any later version).

This package provides an implementation of Cantor's algorithm for
multiplying two binary polynomials using "additive FFT".

The exported function are:

void mulCantor128(uint64_t *H, uint64_t *F, int Fl, uint64_t *G, int Gl);

	multiplies two polynomials F(x) and G(x) and put the results in
	H(x).  F(x) is represented in a dense way by an array F of Fl
	blocks of 64 bits, the same for G, with Gl blocks, and the result
	is put in the table H, that must have room for Fl+Gl blocks of 64
	bits.

as well as other functions allowing FFT caching.

extern void cantor_setup_info(cantor_info_t p, int dF, int dG);

	sets up the appropriate data for multiplying polynomials having
	degrees bounded respectively by dF and dG.
	
extern cantor_transform_t cantor_transform_alloc(const cantor_info_t p,
int n);

	allocates space for n transforms.

extern void cantor_transform_free(const cantor_info_t p,
cantor_transform_t x, int n); 

	frees the n transforms allocated at x

extern inline cantor_transform_get(const cantor_info_t p,
cantor_transform_t x, int k); 

	accesses the k-th transform stored at location x.

extern void cantor_transform(const cantor_info_t p, cantor_transform_t x,
uint64_t * F, int dF);

	performs a direct transform of F, having degree at most dF.

extern void cantor_compose(const cantor_info_t p, cantor_transform_t y,
cantor_transform_t x1, cantor_transform_t x2);

	composes the transforms of two polynomials. The result is by
	definition the transform of their product.

extern void cantor_compose(const cantor_info_t p, cantor_transform_t y,
cantor_transform_t x1, cantor_transform_t x2);

	adds two transforms (the direct transform is linear).

extern void cantor_itransform(const cantor_info_t p, uint64_t * H, int
dH, cantor_transform_t h);

	performs an inverse transform.


This package relies on some routines taken from the Mpfq library. This
should work (?) on any x86 computer with SSE2 instruction set. The GMP
library must be installed.

To compile it, adjust the FLAGS variable in the Makefile, and type

make all

This should produce 3 binaries:
  - bench
  - cantor

bench measures the time spent to multiply two polynomials (type ./bench
for usage).  cantor is a small utility that takes two random polynomials,
multiply them and print the corresponding data, for testing purpose. It
is used by the script check_cantor that will checked the result against
Magma (assuming it is installed).

Examples:

./bench 64 1000 -f 1.1



