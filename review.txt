Reviewing the code before the release.
======================================

Main goal: have every piece of code reviewed by someone who is not the
author.

Tasks of the reviewer
---------------------

*** Uniformize header

Each source file (.c, .h, .pl) should start with the same preamble:
First line: a short description of the file

Second line: blank

Third line: Copyright <years> author1, author2, ...

We put 2008 or 2009 for the year: this really matters only when the first
release will be done. As for authors, even if an author wrote only one
tiny function, it is better to put his name. For names that are not 7-bit
(like Thom\'e, Fran\,cois, J\'er\'emie), we use a TeX-style accent. Don't put
8-bit characters, since they might cause some problems, even within comments.

Fourth line: blank

Lines 5-19: the license stuff.

Formatted preamble ends at line 20.

See dist/src/polyselect/polyselect.c for the example to follow /
copy-paste.

*** For binaries: check options

The main source file of a binary must be well commented with respect to
its use. Each command-line option must be documented, possibly with a
description of the algorithms. Try to avoid things like
   -k:  option to set the k parameter
and make sure that this is understandable for someone who did not read
the whole source.
If some option is obsolete, mark it like so, or even better, remove it
(better check with the author, first!).

Each binary that takes something on stdin and give result on stdout must
also provides the two options -in and -out to allow a use without
redirections. If these options are not present, please add them (should
not be too hard).

*** Names and prototypes of functions

Check the accuracy of function names (sometimes, a function has evolved
since it was first written, so that its name is no longer accurate). Do
not hesitate to change it if the name is obsolete. 

Check also that all the parameters still make sense and if some of them
are no longer used. If the same set of parameters is passed again and
again between functions, consider having a new "typedef struct" for them.

*** Keywords

The magic words TODO and FIXME must be used without white space.
The meaning is more or less the following:
  FIXME: correctness or completeness of functionality
  TODO:  speed-up or clarity

The goal is to be able to grep those keywords before a release, to check
if important problems have been detected but not yet handled.

Don't hesitate to add comments with these keywords if you find that the
algorithm is not optimal, that there is a possible bug, or something else.

*** Style

Don't fix the style: each author has his own style and that's fine. It's
no problem if there is one function indented with 2 and another indented
with 4 in the same file.

However, if the code is unreadable, then you are allowed to do something ;-)

*** Portability

At that point of the development, we are not very strict with the
portability. The goal for the release is the following is to compile and
run on Linux / GCC / x86_64 and x86_32. The 32 bit version is allowed to
be deadly slow (for instance, the use of uint64_t is ok).

*** Code duplication

You MUST first go to dist/src/utils/ and check what is in there: a lot of
things have been added since the start of the development of CADO. It is
important that you can quickly detect if some piece of code duplicates
what is in utils/.

If you find code duplication, and if its easy to factor it, then do it.
If this requires too much work compared to what you can allow, put a
comment with a TODO.

*** Tests

Ideally, we would have a full 100% coverage test, and a bunch of make
check for each small individual part of CADO-NFS. 

This is probably too much to ask before the first release.

Right now, we'll have a nightly build that will checkout from the SVN
repo, compiles itself, and run one or a few small factorization.

This will allow to detect when we break things.

*** Tifa/checknorms

It seems that Tifa is no longer used. We should be sure it is the case.
The binary "checknorms" must have its name changed to "refactor" and rely
on trial division and ecm that are in the lattice siever. It should work
if only a pair (a,b) is given.

The "refactor" program is not used in the classical tool chain, since
"las" produces fully factored relations. It is however a useful tool to
have in our toolbox.

*** Some more remarks on types.

Here are some reasonnable assumptions on types:

- factor base prime are less than 32 bits.
- large prime are less than 48 bits -- except where it happens to be too
  complicated (then stick to 32 bits).
- largest matrix size is 32 bits.
- total number of coefficients is 64 bits.


Task repartition:
=================

Who             What

Francois        Review of gf2x/

Pierrick        Review of linalg/bw/
                Review of utils/

Paul            Review of linalg/merge-purge-duplicates
                Review of sieve/ecm
                Write the nightly build
                Handle the list of files for the "make dist"

Andreas         Review of linalg/characters

Antonio         Review of polyselect/

Emmanuel        Review of sieve/las/

Alex            Review of sqrt/
                Rewrite checknorms -> refactor

Jérémie         Review of cadofactor.pl


